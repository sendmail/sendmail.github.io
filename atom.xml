<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小强</title>
  
  <subtitle>记录技术中的点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.jiayie.xyz/"/>
  <updated>2019-12-14T14:09:42.274Z</updated>
  <id>http://www.jiayie.xyz/</id>
  
  <author>
    <name>John</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>给VPS添加用户并赋予sudo权限</title>
    <link href="http://www.jiayie.xyz/2019/12/14/%E7%BB%99VPS%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E5%B9%B6%E8%B5%8B%E4%BA%88sudo%E6%9D%83%E9%99%90/"/>
    <id>http://www.jiayie.xyz/2019/12/14/%E7%BB%99VPS%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E5%B9%B6%E8%B5%8B%E4%BA%88sudo%E6%9D%83%E9%99%90/</id>
    <published>2019-12-14T14:01:57.000Z</published>
    <updated>2019-12-14T14:09:42.274Z</updated>
    
    <content type="html"><![CDATA[<p>前言：在linux操作系统下，它不像Windows，是没有回收站的，所以你改动一个文件前，最好提前用cp命令将其备份一下，另外linux操作环境下root权限是最高的，看起来很舒服但是可能使用不当会带来很严重的后果，所以为了安全，推荐使用sudo用户，这样可以大大降低风险。</p><p>本文主要根据网上搜索到的资料，整理一下实现此目标的较佳方法。</p><h3 id="一、根据VPS服务商给出的数据使用SSH协议登陆VPS后台"><a href="#一、根据VPS服务商给出的数据使用SSH协议登陆VPS后台" class="headerlink" title="一、根据VPS服务商给出的数据使用SSH协议登陆VPS后台"></a>一、根据VPS服务商给出的数据使用SSH协议登陆VPS后台</h3><p>可选的客户端有很多，如果是Windows，推荐使用Xshell6，当然你也可以选择使用Putty，以root用户身份登陆VPS后台。</p><h4 id="二、给你的VPS添加用户"><a href="#二、给你的VPS添加用户" class="headerlink" title="二、给你的VPS添加用户"></a>二、给你的VPS添加用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -m user</span><br></pre></td></tr></table></figure><p><strong>说明：</strong>user这里代表你设置的用户名，你也可以设置别名，<code>-m</code>表示系统会为你在<code>/root</code>下创建<code>/root/user</code>目录，不加则没有这个效果。</p><h4 id="三、给上一步添加的用户设置登陆密码"><a href="#三、给上一步添加的用户设置登陆密码" class="headerlink" title="三、给上一步添加的用户设置登陆密码"></a>三、给上一步添加的用户设置登陆密码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd user</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>Linux下输入密码时，命令行下不会显示，你挑个自己熟悉的密码连输两遍，他就会提示password更新完毕。</p><h4 id="四、安装sudo"><a href="#四、安装sudo" class="headerlink" title="四、安装sudo"></a>四、安装sudo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get -y install sudo //Debian/Ubuntu这样安装sudo</span><br><span class="line"></span><br><span class="line">yum update &amp;&amp; yum -y install sudo //Centos这样安装sudo</span><br></pre></td></tr></table></figure><h4 id="五、赋予user用户sudo权限"><a href="#五、赋予user用户sudo权限" class="headerlink" title="五、赋予user用户sudo权限"></a>五、赋予user用户sudo权限</h4><p><strong>1. 切换工作目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/sudoers.d</span><br></pre></td></tr></table></figure><p><strong>2. 创建以用户名为名的文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim user</span><br><span class="line"></span><br><span class="line">user ALL=(ALL) ALL //添加此行后保存文件</span><br></pre></td></tr></table></figure><p><strong>3. 修改文件的权限</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 440 /etc/sudoers.d/user</span><br></pre></td></tr></table></figure><p><strong>说明：</strong>权限这里，r代表读权限，权值是4；w代表是写权限，权值是2；x代表执行权限，权值是1。注意查看root位置有没有w权限。<br><strong>4. 给新建用户指定shell</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo -i //切换至root用户</span><br><span class="line"></span><br><span class="line">usermod -s /bin/bash user //指定user用户shell为/bin/bash</span><br></pre></td></tr></table></figure><p><em>说明：</em>如果不这样指定，以sudo用户操作的时候前面不显示当前用户名和路径。</p><h4 id="六、使用sudo用户登录"><a href="#六、使用sudo用户登录" class="headerlink" title="六、使用sudo用户登录"></a>六、使用sudo用户登录</h4><p><strong>1.在Xshell里新建会话</strong></p><ul><li>服务器IP：0.0.0.0</li><li>端口号：Port（常见的都是22）</li><li>用户名：user （之前创建的user sudo用户）</li><li>密码：password（你为user设置的登陆密码）</li></ul><p><strong>2.sudo用户切换到root用户</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure><p><em>注意：</em>如果在输入 <code>sudo -i</code> 过程中有输错的情况，你可以同时按着<code>Ctrl+Backspace</code>退格键来删除或者按着<code>Ctrl+u</code>键，直接清除所有已输入的字符。<br><strong>3.从root用户切换到sudo用户</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su user</span><br></pre></td></tr></table></figure><p><strong>4.以user身份（sudo用户）执行命令时暂时用sudo提权，赋予root权限来执行命令以保证不出错</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h4 id="七、删除sudo用户"><a href="#七、删除sudo用户" class="headerlink" title="七、删除sudo用户"></a>七、删除sudo用户</h4><p><strong>1.取消user用户sudo权限</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm /etc/sudoers.d/user</span><br></pre></td></tr></table></figure><p><strong>2.删除创建的user用户</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel -r user</span><br></pre></td></tr></table></figure><p>文章转自：<a href="https://ssu.tw/index.php/archives/4/" target="_blank" rel="noopener">https://ssu.tw/index.php/archives/4/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前言：在linux操作系统下，它不像Windows，是没有回收站的，所以你改动一个文件前，最好提前用cp命令将其备份一下，另外linux操作环境下root权限是最高的，看起来很舒服但是可能使用不当会带来很严重的后果，所以为了安全，推荐使用sudo用户，这样可以大大降低风险。
      
    
    </summary>
    
    
      <category term="linux" scheme="http://www.jiayie.xyz/categories/linux/"/>
    
    
      <category term="添加用户" scheme="http://www.jiayie.xyz/tags/%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7/"/>
    
  </entry>
  
  <entry>
    <title>使用docker快速部署shadowsocks-libev+v2ray-plugin代理</title>
    <link href="http://www.jiayie.xyz/2019/12/14/%E4%BD%BF%E7%94%A8docker%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2shadowsocks-libev-v2ray-plugin%E4%BB%A3%E7%90%86/"/>
    <id>http://www.jiayie.xyz/2019/12/14/%E4%BD%BF%E7%94%A8docker%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2shadowsocks-libev-v2ray-plugin%E4%BB%A3%E7%90%86/</id>
    <published>2019-12-14T13:34:15.000Z</published>
    <updated>2019-12-14T14:01:33.210Z</updated>
    
    <content type="html"><![CDATA[<p>前言：Shadowsocks-libev是一款安全、轻量和快速的代理协议。它是由clowwindy发明，后同很多技术大牛一起开发，原作者被喝茶以后，因为项目是开源的，所以很多人fork后继续开发，现在主要由madeye负责更新维护。shadowsocks注重加密，数据包几乎没有特征，而shadowsocksr注重混淆，倾向无加密化，现在已经停更，所以不再推荐使用。之前的simple-obfs插件已经弃更，在github项目里也被标识为不推荐使用，转之项目维护者推荐使用shadowsocks-libev+v2ray-plugin插件。</p><p>本文会知无不言地介绍一下使用秋水逸冰为之制作的docker镜像快速部署shadowsocks-libev+v2ray-plugin，主要介绍ws和ws+tls模式。</p><h4 id="说明：本文使用到的各种资源都是各位技术大牛们敲代码洒下汗水一点点换来的，在此对各位用爱发电的大佬们表示感谢！"><a href="#说明：本文使用到的各种资源都是各位技术大牛们敲代码洒下汗水一点点换来的，在此对各位用爱发电的大佬们表示感谢！" class="headerlink" title="说明：本文使用到的各种资源都是各位技术大牛们敲代码洒下汗水一点点换来的，在此对各位用爱发电的大佬们表示感谢！"></a>说明：本文使用到的各种资源都是各位技术大牛们敲代码洒下汗水一点点换来的，在此对各位用爱发电的大佬们表示感谢！</h4><p><strong>条件准备：</strong></p><ul><li>一台墙外VPS</li><li>一台安装好SSH客户端的PC电脑</li><li>只用ws就不用域名，加tls就需要准备一个域名</li><li>注册好Cloudflare账号</li><li>一位会使用基本的Linux命令的自然人<h3 id="一、安装docker"><a href="#一、安装docker" class="headerlink" title="一、安装docker"></a>一、安装docker</h3><h4 id="1-1-以root用户登录，执行一键脚本安装docker"><a href="#1-1-以root用户登录，执行一键脚本安装docker" class="headerlink" title="1.1 以root用户登录，执行一键脚本安装docker"></a>1.1 以root用户登录，执行一键脚本安装docker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get install -y wget vim //以Debian系为例，升级源并安装软件</span><br><span class="line"></span><br><span class="line">wget -qO- get.docker.com | bash //执行此命令等候自动安装docker</span><br></pre></td></tr></table></figure></li></ul><p><strong>说明：</strong>推荐使用KVM架构的VPS，OpenVZ架构的VPS不支持安装docker，另外CentOS8好像还不受此脚本支持来安装docker。</p><h4 id="1-2-对docker的一些命令操作"><a href="#1-2-对docker的一些命令操作" class="headerlink" title="1.2 对docker的一些命令操作"></a>1.2 对docker的一些命令操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker version //查看docker安装版本等信息</span><br><span class="line"></span><br><span class="line">systemctl start docker //启动docker服务</span><br><span class="line"></span><br><span class="line">systemctl status docker //查看docker运行状态</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> docker //将docker服务加入开机自启动</span><br></pre></td></tr></table></figure><h3 id="二、用docker部署shadowsocks-libev-v2ray-plugin（ws类型，不用域名）"><a href="#二、用docker部署shadowsocks-libev-v2ray-plugin（ws类型，不用域名）" class="headerlink" title="二、用docker部署shadowsocks-libev+v2ray-plugin（ws类型，不用域名）"></a>二、用docker部署shadowsocks-libev+v2ray-plugin（ws类型，不用域名）</h3><h4 id="2-1-创建配置文件"><a href="#2-1-创建配置文件" class="headerlink" title="2.1 创建配置文件"></a>2.1 创建配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/shadowsocks-libev //在/etc目录下创建shadowsocks-libev目录</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /etc/shadowsocks-libev //工作空间切换至此</span><br><span class="line"></span><br><span class="line">vim config.json //创建并开始编辑名为config.json的配置文件</span><br><span class="line"></span><br><span class="line">//下为配置文件示例，请添加至文件</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"server"</span>:<span class="string">"0.0.0.0"</span>,</span><br><span class="line"><span class="string">"server_port"</span>:9000,</span><br><span class="line"><span class="string">"method"</span>:<span class="string">"aes-256-gcm"</span>,</span><br><span class="line"><span class="string">"timeout"</span>:300,</span><br><span class="line"><span class="string">"password"</span>:<span class="string">"password0"</span>,</span><br><span class="line"><span class="string">"fast_open"</span>:<span class="literal">false</span>,</span><br><span class="line"><span class="string">"nameserver"</span>:<span class="string">"8.8.8.8"</span>,</span><br><span class="line"><span class="string">"mode"</span>:<span class="string">"tcp_and_udp"</span>,</span><br><span class="line"><span class="string">"plugin"</span>:<span class="string">"v2ray-plugin"</span>,</span><br><span class="line"><span class="string">"plugin_opts"</span>:<span class="string">"server"</span></span><br><span class="line">&#125;</span><br><span class="line">//上为配置文件示例，添加至文件后保存并退出</span><br></pre></td></tr></table></figure><ul><li><p>说明：<code>server</code>后面默认填<code>0.0.0.0</code>，请不要修改。</p></li><li><p>关于更多参数用法和说明请参考：<a href="https://github.com/shadowsocks/shadowsocks-libev/blob/master/doc/shadowsocks-libev.asciidoc" target="_blank" rel="noopener">这个链接</a></p></li><li><p>值得注意的是：如果你配置文件里<code>&quot;plugin_opts&quot;:&quot;server;mux=0&quot;</code>这样配置，那么你可以使用Quantumult X来添加节点使用。</p><h4 id="2-2-用docker结合上面的配置文件创建并启动容器"><a href="#2-2-用docker结合上面的配置文件创建并启动容器" class="headerlink" title="2.2 用docker结合上面的配置文件创建并启动容器"></a>2.2 用docker结合上面的配置文件创建并启动容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name ss-libev --restart always -p 9000:9000 -p 9000:9000/udp -v /etc/shadowsocks-libev:/etc/shadowsocks-libev teddysun/shadowsocks-libev</span><br></pre></td></tr></table></figure></li><li><p>docker run：开始运行一个容器</p></li><li><p>-d 参数：容器以后台运行并输出容器ID</p></li><li><p>—name 参数：给容器分配一个识别符，方便将来的启动，停止，删除等操作</p></li><li><p>—restart 参数：配置容器启动类型，always即为docker服务重新启动时自动启动本容器</p></li><li><p>-p 参数：容器的9000端口映射到本机的9000端口。默认是TCP映射，当需要UDP映射时候，那就再追加一次UDP的映射。冒号后面是容器端口，冒号前面是宿主机端口，可以写成一致，也可以写成不一致</p></li><li><p>-v 参数：挂载卷（volume），冒号后面是容器的路径，冒号前面是宿主机的路径，可以写成一致，也可以写成不一致</p></li><li><p>teddysun/shadowsocks-libev：这是从docker拉取回来的镜像路径</p><h4 id="2-3-后期容器处理常用命令"><a href="#2-3-后期容器处理常用命令" class="headerlink" title="2.3 后期容器处理常用命令"></a>2.3 后期容器处理常用命令</h4><p>记前面<code>docker run</code>后面<code>--name ss-libev</code>中的<code>ss-libev</code>为<code>$name</code>，其代表容器识别符，也就是<code>$name=ss-libev</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker ps -as //查看容器在线状态及大小，在这里你一般可以看到<span class="variable">$name</span>=ss-libev</span><br><span class="line"></span><br><span class="line">docker logs <span class="variable">$name</span> //查看此容器的运行输出日志</span><br><span class="line"></span><br><span class="line">docker restart <span class="variable">$name</span> //重新启动容器，一般在修改除端口外的配置后使用使修改生效</span><br><span class="line"></span><br><span class="line">docker stop <span class="variable">$name</span> //停止此容器的运行</span><br><span class="line"></span><br><span class="line">docker rm <span class="variable">$name</span> //移除此容器</span><br><span class="line"></span><br><span class="line">docker stats --no-stream //查看docker容器占用CPU，内存等信息</span><br></pre></td></tr></table></figure></li></ul><h3 id="三、用docker部署shadowsocks-libev-v2ray-plugin（ws-tls类型，需要域名）"><a href="#三、用docker部署shadowsocks-libev-v2ray-plugin（ws-tls类型，需要域名）" class="headerlink" title="三、用docker部署shadowsocks-libev+v2ray-plugin（ws+tls类型，需要域名）"></a>三、用docker部署shadowsocks-libev+v2ray-plugin（ws+tls类型，需要域名）</h3><h4 id="3-1-用acme-sh脚本申请证书"><a href="#3-1-用acme-sh脚本申请证书" class="headerlink" title="3.1 用acme.sh脚本申请证书"></a>3.1 用acme.sh脚本申请证书</h4><p>关于这个，之前专门水过一篇文章：用acme.sh脚本申请证书并自动续更 ，还请麻烦前往查看，下面默认你已经获取到<code>Clouflare api key</code>，并且也已经安装好<code>acme.sh</code>脚本。</p><h4 id="3-2-安装证书到放置ss配置文件的目录"><a href="#3-2-安装证书到放置ss配置文件的目录" class="headerlink" title="3.2 安装证书到放置ss配置文件的目录"></a>3.2 安装证书到放置ss配置文件的目录</h4><p>假设你的是域名是<code>mydomain.me</code>，且已经在<code>Cloudflare</code>上设置好<code>A记录解析</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kdir /etc/ssplugin &amp;&amp; <span class="built_in">cd</span> /etc/ssplugin //创建目录并切换至此</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> CF_Key=<span class="string">"slfjksjffjfhfhkjhfksjf"</span> //此处替换成你自己的Key</span><br><span class="line"><span class="built_in">export</span> CF_Email=<span class="string">"yourcloudflare@gmail.com"</span> //此处填写你注册Cloudflare使用的邮箱账号</span><br><span class="line"></span><br><span class="line">acme.sh --issue --dns dns_cf -d mydomain.me -k ec-256 //用脚本申请证书</span><br><span class="line"></span><br><span class="line">acme.sh --installcert -d mydomain.me --fullchain-file /etc/ssplugin/plugin.crt --key-file /etc/ssplugin/plugin.key --ecc //安装证书到/etc/ssplugin目录下</span><br></pre></td></tr></table></figure><h4 id="3-3-创建配置文件"><a href="#3-3-创建配置文件" class="headerlink" title="3.3 创建配置文件"></a>3.3 创建配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/ssplugin //其实上一步之后应该就是在这个目录里了</span><br><span class="line"></span><br><span class="line">vim config.json //创建并开始编辑配置文件</span><br><span class="line"></span><br><span class="line">//下面是配置文件示例</span><br><span class="line">&#123;</span><br><span class="line">&quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">&quot;server_port&quot;:9000,</span><br><span class="line">&quot;password&quot;:&quot;password0&quot;,</span><br><span class="line">&quot;timeout&quot;:300,</span><br><span class="line">&quot;method&quot;:&quot;aes-256-gcm&quot;,</span><br><span class="line">&quot;fast_open&quot;:false,</span><br><span class="line">&quot;nameserver&quot;:&quot;8.8.8.8&quot;,</span><br><span class="line">&quot;mode&quot;:&quot;tcp_and_udp&quot;,</span><br><span class="line">&quot;plugin&quot;:&quot;v2ray-plugin&quot;,</span><br><span class="line">&quot;plugin_opts&quot;:&quot;server;tls;host=mydomain.me;cert=/etc/shadowsocks-libev/plugin.crt;key=/etc/shadowsocks-libev/plugin.key&quot;</span><br><span class="line">&#125;</span><br><span class="line">//上面是配置文件示例，请添加至文件后保存并退出。</span><br></pre></td></tr></table></figure><p><strong>说明</strong>：server后面的 0.0.0.0 不要修改，plugin_opts后面的证书位置配置也不要修改，尽管你证书明明是放在 /etc/ssplugin 目录下，尽管你宿主机里没有创建 /etc/shadowsocks-libev 目录，这里cert和key的路径是写死的，当然证书名是要根据你上一步生成的。</p><h4 id="3-4-用docker配合配置文件创建并启动容器"><a href="#3-4-用docker配合配置文件创建并启动容器" class="headerlink" title="3.4 用docker配合配置文件创建并启动容器"></a>3.4 用docker配合配置文件创建并启动容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name ss-plugin --restart always -p 9000:9000 -p 9000:9000/udp -v /etc/ssplugin:/etc/shadowsocks-libev teddysun/shadowsocks-libev</span><br></pre></td></tr></table></figure><ul><li>docker run：开始运行一个容器</li><li>-d 参数：容器以后台运行并输出容器ID</li><li>—name 参数：给容器分配一个识别符，方便将来的启动，停止，删除等操作</li><li>—restart 参数：配置容器启动类型，always即为docker服务重新启动时自动启动本容器</li><li>-p 参数：容器的9000端口映射到本机的9000端口。默认是TCP映射，当需要UDP映射时候，那就再追加一次UDP的映射。冒号后面是容器端口，冒号前面是宿主机端口，可以写成一致，也可以写成不一致</li><li>-v 参数：挂载卷（volume），冒号后面是容器的路径，冒号前面是宿主机的路径，可以写成一致，也可以写成不一致</li><li>teddysun/shadowsocks-libev：这是从docker拉取回来的镜像路径<h4 id="3-5-后期docker容器常用处理命令"><a href="#3-5-后期docker容器常用处理命令" class="headerlink" title="3.5 后期docker容器常用处理命令"></a>3.5 后期docker容器常用处理命令</h4>记前面<code>docker run</code>后面<code>--name ss-plugin</code>中的<code>ss-plugin</code>为<code>$name</code>，其代表容器识别符，也就是<code>$name=ss-plugin</code>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker ps -as //查看容器在线状态及大小，在这里你一般可以看到<span class="variable">$name</span>=ss-plugin</span><br><span class="line"></span><br><span class="line">docker logs <span class="variable">$name</span> //查看此容器的运行输出日志</span><br><span class="line"></span><br><span class="line">docker restart <span class="variable">$name</span> //重新启动容器，一般在修改除端口外的配置后使用使修改生效</span><br><span class="line"></span><br><span class="line">docker stop <span class="variable">$name</span> //停止此容器的运行</span><br><span class="line"></span><br><span class="line">docker rm <span class="variable">$name</span> //移除此容器</span><br><span class="line"></span><br><span class="line">docker stats --no-stream //查看docker容器占用CPU，内存等信息</span><br></pre></td></tr></table></figure></li></ul><h3 id="四、用docker部署shadowsocks-libev-v2ray-plugin（ws-caddy提供的tls，可选套cdn）"><a href="#四、用docker部署shadowsocks-libev-v2ray-plugin（ws-caddy提供的tls，可选套cdn）" class="headerlink" title="四、用docker部署shadowsocks-libev+v2ray-plugin（ws+caddy提供的tls，可选套cdn）"></a>四、用docker部署shadowsocks-libev+v2ray-plugin（ws+caddy提供的tls，可选套cdn）</h3><h4 id="4-1-证书安装情况跟上面一致"><a href="#4-1-证书安装情况跟上面一致" class="headerlink" title="4.1 证书安装情况跟上面一致"></a>4.1 证书安装情况跟上面一致</h4><p>这种方式是受推荐使用的，也是借鉴v2ray安装ws+tls而来。其中申请证书什么的跟上面一致，请参考：<a href="https://ssu.tw/index.php/archives/8/" target="_blank" rel="noopener">这个链接</a>。<br>基于此，下面默认你已经为<code>mydomain.me</code>申请好证书放置在<code>/root/.acme.sh</code>内部目录下，但还没安装证书到哪个位置。</p><h4 id="4-2-创建ss的配置文件"><a href="#4-2-创建ss的配置文件" class="headerlink" title="4.2 创建ss的配置文件"></a>4.2 创建ss的配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/ssplugin &amp;&amp; <span class="built_in">cd</span> /etc/ssplugin //创建目录并切换至此</span><br><span class="line"></span><br><span class="line">vim config.json //创建并开始编辑config.json配置文件</span><br><span class="line"></span><br><span class="line">//下面是配置文件示例，请添加至文件</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"server"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line"><span class="string">"server_port"</span>:9000,</span><br><span class="line"><span class="string">"method"</span>:<span class="string">"aes-256-gcm"</span>,</span><br><span class="line"><span class="string">"timeout"</span>:300,</span><br><span class="line"><span class="string">"password"</span>:<span class="string">"password0"</span>,</span><br><span class="line"><span class="string">"fast_open"</span>:<span class="literal">false</span>,</span><br><span class="line"><span class="string">"nameserver"</span>:<span class="string">"8.8.8.8"</span>,</span><br><span class="line"><span class="string">"mode"</span>:<span class="string">"tcp_and_udp"</span>,</span><br><span class="line"><span class="string">"plugin"</span>:<span class="string">"v2ray-plugin"</span>,</span><br><span class="line"><span class="string">"plugin_opts"</span>:<span class="string">"server;path=/ray"</span></span><br><span class="line">&#125;</span><br><span class="line">//上面是配置文件示例，请添加至文件后保存并退出</span><br></pre></td></tr></table></figure><p><strong>说明：</strong>因为要监听本地，所以server后面地址填127.0.0.1，所以9000端口不对外开放，此处只是在ws的配置上加了个path参数，tls要由后面的caddy来支持。</p><h4 id="4-4-安装caddy"><a href="#4-4-安装caddy" class="headerlink" title="4.4 安装caddy"></a>4.4 安装caddy</h4><p>执行下面一条命令安装<code>caddy</code>，也就是以个人身份申请使用<code>caddy</code>的二进制，并把它放到<code>/usr/local/bin</code>目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root //切换到/root目录</span><br><span class="line"></span><br><span class="line">wget -qO- https://getcaddy.com | bash -s personal //下载caddy的二进制并放置在/usr/<span class="built_in">local</span>/bin目录下</span><br></pre></td></tr></table></figure><p><strong>说明：</strong>如果你用的Centos7安装到这一步了，执行完上面的命令会有报错，你可以先 <code>ls /usr/local/bin</code> 先查看下caddy的二进制有没有下载到本地了，如果有的话，那么执行下caddy你可能会遇到<code>command not found</code>的反馈结果，原因应该是上面这个安装脚本在Centos7下没法把caddy所在的路径<code>/usr/local/bin</code>加入到环境变量里，那么解决办法有两个。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">第一：在4.7使用 nohup /usr/<span class="built_in">local</span>/bin/caddy -conf /root/caddy/Caddyfile &amp; 避免报错。</span><br><span class="line"></span><br><span class="line">第二：这一步就开始把/usr/<span class="built_in">local</span>/bin加入<span class="variable">$PATH</span>的取值内，具体操作步骤如下：</span><br><span class="line"></span><br><span class="line">vim /root/.bash_profile</span><br><span class="line"></span><br><span class="line">PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/bin //加入此行，文件内应该是有 <span class="built_in">export</span> PATH这一行的。</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /root/.bash_profile //使环境变量生效</span><br></pre></td></tr></table></figure><h4 id="4-5-配置caddy证书"><a href="#4-5-配置caddy证书" class="headerlink" title="4.5 配置caddy证书"></a>4.5 配置caddy证书</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir caddy &amp;&amp; <span class="built_in">cd</span> caddy //在/root目录下创建caddy目录并切换至此</span><br><span class="line"></span><br><span class="line">acme.sh --installcert -d mydomain.me --fullchain-file /root/caddy/caddy.crt --key-file /root/caddy/caddy.key --ecc //安装证书和key到/root/caddy目录下</span><br></pre></td></tr></table></figure><h4 id="4-6-创建caddy主配置文件Caddyfile"><a href="#4-6-创建caddy主配置文件Caddyfile" class="headerlink" title="4.6 创建caddy主配置文件Caddyfile"></a>4.6 创建caddy主配置文件Caddyfile</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vim Caddyfile //创建文件并开始编辑</span><br><span class="line"></span><br><span class="line">//下面是caddy配置文件示例，请添加至文件</span><br><span class="line">mydomain.me:443 &#123;</span><br><span class="line">  gzip</span><br><span class="line">  tls /root/caddy/caddy.crt /root/caddy/caddy.key</span><br><span class="line">  <span class="built_in">log</span> /root/caddy/caddy.log</span><br><span class="line">  proxy / https://baidu.com</span><br><span class="line">  proxy /ray 127.0.0.1:9000 &#123;</span><br><span class="line">    websocket</span><br><span class="line">    header_upstream -Origin</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//上面是配置文件示例，请按照实际情况替换填写</span><br></pre></td></tr></table></figure><p><strong>说明:</strong>此处只需要关注路径和端口号，<code>9000</code>是你<code>/etc/ssplugin/config.json</code>目录下配置的，<code>/ray</code>是你这个文件内<code>plugin_opts</code>后面的<code>path=/ray</code>，请注意替换。</p><h4 id="4-7-让caddy搭配Caddyfile文件运行起来"><a href="#4-7-让caddy搭配Caddyfile文件运行起来" class="headerlink" title="4.7 让caddy搭配Caddyfile文件运行起来"></a>4.7 让caddy搭配Caddyfile文件运行起来</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nohup caddy -conf /root/caddy/Caddyfile &amp; //让caddy在后台运行起来</span><br><span class="line"></span><br><span class="line">//直接回车让caddy服务后台挂起</span><br><span class="line"></span><br><span class="line">cat nohup.out //可以查看输出的日志</span><br><span class="line"></span><br><span class="line">cat /root/caddy/caddy.log //可以查看caddy运行产生的日志</span><br></pre></td></tr></table></figure><h4 id="4-8-开启Cloudflare的CDN保护，开启SSL-TLS的Full模式"><a href="#4-8-开启Cloudflare的CDN保护，开启SSL-TLS的Full模式" class="headerlink" title="4.8 开启Cloudflare的CDN保护，开启SSL/TLS的Full模式"></a>4.8 开启Cloudflare的CDN保护，开启SSL/TLS的Full模式</h4><img src="/2019/12/14/使用docker快速部署shadowsocks-libev-v2ray-plugin代理/1.png"><img src="/2019/12/14/使用docker快速部署shadowsocks-libev-v2ray-plugin代理/2.png"><p><strong>值得注意的是：</strong>使用<code>ss-libev+ws+tls</code>，能否套<code>CDN</code>并不依赖<code>web</code>服务器，就像如果是第二种配置，没有使用caddy，配置文件里直接配置证书和key路径的那种，你可以设置特殊端口，比如443和8443，这些端口的https流量是可以经cloudflare转发的。但是使用web服务器也可以套CDN，而且伪装的比较好，可能就是稍微有些麻烦吧。</p><h3 id="五、客户端配置"><a href="#五、客户端配置" class="headerlink" title="五、客户端配置"></a>五、客户端配置</h3><h4 id="5-1-Win端"><a href="#5-1-Win端" class="headerlink" title="5.1 Win端"></a>5.1 Win端</h4><ul><li><p>先到<a href="https://github.com/shadowsocks/v2ray-plugin/releases" target="_blank" rel="noopener">这个链接</a>下载v2ray-plugin-windows-amd64的包</p></li><li><p>下载完成后解压到<a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">shadowsocks-windows</a>的目录下</p></li><li><p>重命名为v2ray-plugin.exe文件</p></li><li><p>插件程序：v2ray-plugin</p></li><li><p>如果选的是第一种，<code>v2ray-plugin</code>的ws类型，插件选项这里可以留空</p></li><li><p>如果选的是第二种，v2ray-plugin的<code>ws+tls</code>类型，插件选项这里填 <code>tls;host=mydomain.me</code></p></li><li><p>如果选的是第三种，v2ray-plugin的<code>ws+caddy</code>提供的tls类型，插件选项这里填 <code>tls;host=mydomain.me;path=/ray</code>。</p></li><li><p>第三种配置建议是开启CDN，然后本地配置两个节点，服务器那里写IP就是<code>ss+ws+tls</code>，写域名就是<code>ss+ws+tls+cdn</code>。</p></li><li><p>值得注意的是：如果你这么设置<code>&quot;plugin_opts&quot;:&quot;server;mux=0&quot;</code>，你就可以使用Quantumult X来使用这个节点，但win端不能直接使用了。</p><h4 id="5-2-Android端"><a href="#5-2-Android端" class="headerlink" title="5.2 Android端"></a>5.2 Android端</h4><p>先到这个<a href="https://github.com/shadowsocks/v2ray-plugin-android/releases" target="_blank" rel="noopener">链接</a>下载插件并安装<br>其余的配置都跟上面win端一致</p><h4 id="5-3-ios端"><a href="#5-3-ios端" class="headerlink" title="5.3 ios端"></a>5.3 ios端</h4><p>请使用<code>Shadowrocket</code>，也就是俗称的小火箭，配置添加使用。</p><img src="/2019/12/14/使用docker快速部署shadowsocks-libev-v2ray-plugin代理/3.png"><img src="/2019/12/14/使用docker快速部署shadowsocks-libev-v2ray-plugin代理/4.png"><img src="/2019/12/14/使用docker快速部署shadowsocks-libev-v2ray-plugin代理/5.png"></li></ul><p><strong>原文链接：</strong><a href="https://ssu.tw/index.php/archives/31/" target="_blank" rel="noopener">https://ssu.tw/index.php/archives/31/</a></p><p><strong>参考链接：</strong><br><a href="https://github.com/shadowsocks/shadowsocks-libev" target="_blank" rel="noopener">github上shadowsocks-libev项目开源地址</a><br><a href="https://github.com/shadowsocks/v2ray-plugin" target="_blank" rel="noopener">github上v2ray-plugin插件项目开源地址</a><br><a href="https://github.com/shadowsocks/simple-obfs" target="_blank" rel="noopener">github上simple-obfs插件项目开源地址</a><br><a href="https://github.com/docker/docker-ce" target="_blank" rel="noopener">github上docker项目开源地址</a><br><a href="https://github.com/Neilpang/acme.sh" target="_blank" rel="noopener">github上Neilpang关于acme.sh证书申请脚本项目开源地址</a><br><a href="https://teddysun.com/536.html" target="_blank" rel="noopener">秋水逸冰“介绍几款Docker镜像”文章</a><br><a href="https://hub.docker.com/r/teddysun/shadowsocks-libev" target="_blank" rel="noopener">秋水逸冰发布shadowsocks-libev docker镜像地址</a><br><a href="https://shadowsocks.org/" target="_blank" rel="noopener">shadowsocks官网地址介绍</a><br><a href="https://toutyrater.github.io/advanced/wss_and_web.html" target="_blank" rel="noopener">V2Ray白话文配置教程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前言：Shadowsocks-libev是一款安全、轻量和快速的代理协议。它是由clowwindy发明，后同很多技术大牛一起开发，原作者被喝茶以后，因为项目是开源的，所以很多人fork后继续开发，现在主要由madeye负责更新维护。shadowsocks注重加密，数据包几乎
      
    
    </summary>
    
    
      <category term="shadowsocks" scheme="http://www.jiayie.xyz/categories/shadowsocks/"/>
    
    
      <category term="v2" scheme="http://www.jiayie.xyz/tags/v2/"/>
    
  </entry>
  
  <entry>
    <title>用acme.sh脚本申请证书并自动续更</title>
    <link href="http://www.jiayie.xyz/2019/12/14/%E7%94%A8acme-sh%E8%84%9A%E6%9C%AC%E7%94%B3%E8%AF%B7%E8%AF%81%E4%B9%A6%E5%B9%B6%E8%87%AA%E5%8A%A8%E7%BB%AD%E6%9B%B4/"/>
    <id>http://www.jiayie.xyz/2019/12/14/%E7%94%A8acme-sh%E8%84%9A%E6%9C%AC%E7%94%B3%E8%AF%B7%E8%AF%81%E4%B9%A6%E5%B9%B6%E8%87%AA%E5%8A%A8%E7%BB%AD%E6%9B%B4/</id>
    <published>2019-12-14T13:23:00.000Z</published>
    <updated>2019-12-14T13:33:20.178Z</updated>
    
    <content type="html"><![CDATA[<p>前言：acme.sh脚本实现了acme协议，可以从letsencrypt生成免费的证书，并且支持手动发行免费的通配符证书，这对广大个人站长无疑是个很大的福利。</p><p>本文则主要介绍使用acme.sh脚本搭配Cloudflare的Global API Key来为托管在Cloudflare上的域名申请证书，并实现到期自动续订的步骤。</p><p>本文参考：<a href="https://github.com/Neilpang/acme.sh/wiki/%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh/wiki/%E8%AF%B4%E6%98%8E</a></p><h3 id="一、安装acme-sh脚本"><a href="#一、安装acme-sh脚本" class="headerlink" title="一、安装acme.sh脚本"></a>一、安装acme.sh脚本</h3><h4 id="1-1-执行下面的命令"><a href="#1-1-执行下面的命令" class="headerlink" title="1.1 执行下面的命令"></a>1.1 执行下面的命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get -y install socat //安装socat</span><br><span class="line"></span><br><span class="line">wget -qO- get.acme.sh | bash //安装脚本</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc //让环境变量生效，以后无论在哪个路径，直接使用acme.sh</span><br></pre></td></tr></table></figure><p>说明：root用户和非root用户都可以安装使用，安装过程不污染已有的系统任何功能和文件，所有的修改都限制在安装目录中。</p><h4 id="1-2-安装过程及安装目录解释（嫌麻烦可以跳过）"><a href="#1-2-安装过程及安装目录解释（嫌麻烦可以跳过）" class="headerlink" title="1.2 安装过程及安装目录解释（嫌麻烦可以跳过）"></a>1.2 安装过程及安装目录解释（嫌麻烦可以跳过）</h4><ul><li>先把acme.sh安装到你的/home/user/.acme.sh目录下，root用户则安装到/root/.acme.sh目录下。</li><li>创建一个bash的alias，方便你的使用： alias acme.sh=~/.acme.sh/acme.sh</li><li>它会自动在.bashrc的最后添加环境变量，. “/home/user/.acme.sh/acme.sh.env”，如果是root用户，则为. “/root/.acme.sh/acme.sh.env”，你需要 source ~/.bashrc命令使环境变量生效，以后就可以直接使用acme.sh命令了。</li><li>自动为你创建crontabjob任务，每天0:00自动检测所有的证书，如果快过期了需要更新，则会自动更新证书。</li><li>更高级的证书安装选项请参考：<a href="https://github.com/Neilpang/acme.sh/wiki/How-to-install" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh/wiki/How-to-install</a><h3 id="二、到Cloudflare那里拿到Global-API-Key"><a href="#二、到Cloudflare那里拿到Global-API-Key" class="headerlink" title="二、到Cloudflare那里拿到Global API Key"></a>二、到Cloudflare那里拿到Global API Key</h3><h4 id="2-1-注册Cloudflare账号并添加域名"><a href="#2-1-注册Cloudflare账号并添加域名" class="headerlink" title="2.1 注册Cloudflare账号并添加域名"></a>2.1 注册Cloudflare账号并添加域名</h4>这个就不用多做介绍了吧，注意要在域名注册商那里把域名的NS权限交由Cloudflare来解析，才能添加上域名，之后添加A记录，假设域名是mydomain.me，Name填@或者www，Content填你的VPS IP，TTL默认，CDN云朵可以开启也可以不开启。<h4 id="2-2-获取Global-API-Key"><a href="#2-2-获取Global-API-Key" class="headerlink" title="2.2 获取Global API Key"></a>2.2 获取Global API Key</h4><img src="/2019/12/14/用acme-sh脚本申请证书并自动续更/1.png">按照图示操作复制此Key即可，注意保存在安全位置。<h3 id="三、配置证书-dns-cf-api验证"><a href="#三、配置证书-dns-cf-api验证" class="headerlink" title="三、配置证书(dns+cf api验证)"></a>三、配置证书(dns+cf api验证)</h3><h4 id="3-1-配置条件"><a href="#3-1-配置条件" class="headerlink" title="3.1 配置条件"></a>3.1 配置条件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CF_Key=<span class="string">"slfjksjffjfhfhkjhfksjf"</span> //此处替换成你自己的Key</span><br><span class="line"><span class="built_in">export</span> CF_Email=<span class="string">"yourcloudflare@gmail.com"</span> //此处填写你注册Cloudflare使用的邮箱账号</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-2-申请颁发ECC证书"><a href="#3-2-申请颁发ECC证书" class="headerlink" title="3.2 申请颁发ECC证书"></a>3.2 申请颁发ECC证书</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --issue --dns dns_cf -d mydomain.me -k ec-256</span><br></pre></td></tr></table></figure><p>说明：上面的CF_Key和CF_Email在执行这一步之后将被保存到<code>/root/.acme.sh/account.conf</code>文件中，在需要时会被重新使用。域名套CDN状态下也可以申请成功证书。<br>关于更详细的api用法，请参考：<a href="https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md" target="_blank" rel="noopener">https://github.com/Neilpang/acme.sh/blob/master/dnsapi/README.md</a></p><h4 id="3-3-复制-安装证书"><a href="#3-3-复制-安装证书" class="headerlink" title="3.3 复制/安装证书"></a>3.3 复制/安装证书</h4><p>注意：默认生成的证书都放置在~/.acme.sh/mydomain.me_ecc目录下，请不要直接使用这目录下的文件，因为这里属于内部文件，且将来目录结构可能会变化。<br>正确的使用方法如下（假定在/root/ssl目录下放置证书）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --installcert -d mydomain.me --fullchain-file /root/ssl/web.cer --key-file /root/ssl/web.key --ecc</span><br></pre></td></tr></table></figure><p><strong>值得注意的是</strong>：这里指定的所有参数会被自动记录下来，并且在证书自动更新以后会被再次调用。</p><h4 id="四、更新证书"><a href="#四、更新证书" class="headerlink" title="四、更新证书"></a>四、更新证书</h4><p>关于从Letsencrypt申请到的证书，有效期为90天，脚本会每60天自动更新证书，你无须进行任何操作，今后可能会缩短这个时间，不过都是自动的，你不用关心。</p><h4 id="五、更新acme-sh脚本"><a href="#五、更新acme-sh脚本" class="headerlink" title="五、更新acme.sh脚本"></a>五、更新acme.sh脚本</h4><p>目前由于acme协议和letsencrypt CA都在频繁的更新，因此acme.sh脚本呢也经常更新以保持同步。</p><h4 id="5-1-升级acme-sh到最新版"><a href="#5-1-升级acme-sh到最新版" class="headerlink" title="5.1 升级acme.sh到最新版"></a>5.1 升级acme.sh到最新版</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --upgrade</span><br></pre></td></tr></table></figure><h4 id="5-2-如果你不想手动升级，可以开启自动升级："><a href="#5-2-如果你不想手动升级，可以开启自动升级：" class="headerlink" title="5.2 如果你不想手动升级，可以开启自动升级："></a>5.2 如果你不想手动升级，可以开启自动升级：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --upgrade --auto-upgrade</span><br></pre></td></tr></table></figure><h4 id="5-3-你也可以随时关闭脚本的自动更新"><a href="#5-3-你也可以随时关闭脚本的自动更新" class="headerlink" title="5.3 你也可以随时关闭脚本的自动更新"></a>5.3 你也可以随时关闭脚本的自动更新</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --upgrade --auto-upgrade 0</span><br></pre></td></tr></table></figure><h3 id="六、定时任务"><a href="#六、定时任务" class="headerlink" title="六、定时任务"></a>六、定时任务</h3><h4 id="6-1-安装crontab"><a href="#6-1-安装crontab" class="headerlink" title="6.1 安装crontab"></a>6.1 安装crontab</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get -y install cron</span><br></pre></td></tr></table></figure><h4 id="6-2-设置定时任务"><a href="#6-2-设置定时任务" class="headerlink" title="6.2 设置定时任务"></a>6.2 设置定时任务</h4><p>如果你是用的lamp搭建的网站，并在lamp add添加站点过程中手动指定了证书的位置为<code>/root/ssl</code>，证书：<code>/root/ssl/web.cer</code>和key：<code>/root/ssl/web.key</code>，那么你可以设置定时任务定时自动将证书放到这里。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">crontab -e //编辑定时任务</span><br><span class="line"></span><br><span class="line">0 3 15 */2 * acme.sh --installcert -d mydomain.me --fullchain-file /root/ssl/web.cer --key-file /root/ssl/web.key --ecc &amp;&amp; /etc/init.d/httpd restart</span><br></pre></td></tr></table></figure><p>说明：这是设置每隔2个月在15号的3:00安装证书和key到/root/ssl目录下，并重启apache服务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前言：acme.sh脚本实现了acme协议，可以从letsencrypt生成免费的证书，并且支持手动发行免费的通配符证书，这对广大个人站长无疑是个很大的福利。&lt;/p&gt;
&lt;p&gt;本文则主要介绍使用acme.sh脚本搭配Cloudflare的Global API Key来为托管在
      
    
    </summary>
    
    
      <category term="域名证书" scheme="http://www.jiayie.xyz/categories/%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6/"/>
    
    
      <category term="脚本申请证书" scheme="http://www.jiayie.xyz/tags/%E8%84%9A%E6%9C%AC%E7%94%B3%E8%AF%B7%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu-18.04-LTS安装KVM虚拟机</title>
    <link href="http://www.jiayie.xyz/2019/12/14/Ubuntu-18-04-LTS%E5%AE%89%E8%A3%85KVM%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <id>http://www.jiayie.xyz/2019/12/14/Ubuntu-18-04-LTS%E5%AE%89%E8%A3%85KVM%E8%99%9A%E6%8B%9F%E6%9C%BA/</id>
    <published>2019-12-14T10:24:20.000Z</published>
    <updated>2019-12-14T10:50:35.501Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>首先需要检查一下CPU是否支持虚拟化，执行一下命令来检查/proc/cpuinfo文件中是否又虚拟化相关的字眼，如果有的话表明CPU支持虚拟化技术。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">egrep -c <span class="string">'(svm|vmx)'</span> /proc/cpuinfo</span><br></pre></td></tr></table></figure><p>上面命令执行结果如果返回0，表示CPU不支持虚拟化技术。当然主板BIOS中的虚拟化技术也可能不是默认开启的，如果没有开启需要手动开启一下。</p><h3 id="安装KVM"><a href="#安装KVM" class="headerlink" title="安装KVM"></a>安装KVM</h3><p>执行以下命令安装KVM</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install qemu qemu-kvm libvirt-bin  bridge-utils  virt-manager</span><br></pre></td></tr></table></figure><p>然后执行下面的命令看KVM是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kvm-ok</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO: /dev/kvm exists</span><br><span class="line">KVM acceleration can be used</span><br></pre></td></tr></table></figure><p>如果输出是这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO: Your CPU does not support KVM extensions</span><br><span class="line">KVM acceleration can NOT be used</span><br></pre></td></tr></table></figure><p>这表明你的CPU不支持硬件虚拟化。 这时你还是可以跑虚拟机，不过会非常慢。如果你的CPU支持硬件虚拟化， 但BIOS没有打开，也会提示给你的</p><h4 id="查看kvm内核模块是否已加载"><a href="#查看kvm内核模块是否已加载" class="headerlink" title="查看kvm内核模块是否已加载"></a>查看kvm内核模块是否已加载</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo lsmod | grep kvm</span><br></pre></td></tr></table></figure><p>若KVM内核没加载执行下面命令加载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo modprobe kvm</span><br></pre></td></tr></table></figure><p>打开一个命令行窗口， 输入以下命令启动虚拟机管理程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">birt-manager</span><br></pre></td></tr></table></figure><p>将libvirtd添加自启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start libvirtd.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> libvirtd.service</span><br></pre></td></tr></table></figure><h3 id="网络模式"><a href="#网络模式" class="headerlink" title="网络模式"></a>网络模式</h3><p>KVM安装完成后，首先需要进行网络设定，KVM支持四种网络模式：</p><ul><li>桥接模式</li><li>NAT模式</li><li>用户网络模式,即创建 vm 时默认的网络模式</li><li>直接分配设备模式<h3 id="桥接（Bridge）模式"><a href="#桥接（Bridge）模式" class="headerlink" title="桥接（Bridge）模式"></a>桥接（Bridge）模式</h3>在桥接模式下，宿主机和虚拟机共享同一个物理网络设备，虚拟机中的网卡和物理机中的网卡是平行关系，所以虚拟机可以直接接入外部网络，虚拟机和宿主机有平级的IP。原本宿主机是通过网卡eth0连接外部网络的，网桥模式会新创建一个网桥br0，接管eth0来连接外部网络，然后将宿主机和虚拟机的网卡eth0都绑定到网桥上。<h4 id="使用桥接模式需要进行以下操作："><a href="#使用桥接模式需要进行以下操作：" class="headerlink" title="使用桥接模式需要进行以下操作："></a>使用桥接模式需要进行以下操作：</h4>编辑/etc/network/interfaces，增加如下内容<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">auto br0</span><br><span class="line">iface br0 inet dhcp  <span class="comment"># 网桥使用DHCP模式，从DHCP服务器获取IP</span></span><br><span class="line">bridge_ports enp3s0  <span class="comment"># 网卡名称，网桥创建前连接外部的网卡，可通过ifconfig命令查看，有IP地址的就是</span></span><br><span class="line">bridge_stp on  <span class="comment"># 避免数据链路出现死循环</span></span><br><span class="line">bridge_fd 0  <span class="comment"># 将转发延迟设置为0</span></span><br></pre></td></tr></table></figure></li></ul><p>接下来需要重启networking服务（如果是通过SSH连接到宿主机上的，这一步会导致网络中断，如果出现问题可能导致连不上宿主机，最好在宿主机上直接操作）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart networking.service</span><br></pre></td></tr></table></figure><p>使用ifconfig命令查看IP是否从enp3s0（网桥创建前的网卡）变到了br0上，如果没有变化则需要重启。如果宿主机ip已经成功变到网桥上，并且宿主机能正常上网而虚拟机获取不到ip，可能是ufw没有允许ip转发导致的，编辑<code>/etc/default/ufw</code>允许ip转发。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEFAULT_FORWARD_POLICY=<span class="string">"ACCEPT"</span></span><br></pre></td></tr></table></figure><p>重启ufw服务让设置生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart ufw.service</span><br></pre></td></tr></table></figure><h4 id="NAT（Network-Address-Translation）模式"><a href="#NAT（Network-Address-Translation）模式" class="headerlink" title="NAT（Network Address Translation）模式"></a>NAT（Network Address Translation）模式</h4><p>NAT模式是KVM默认的网络模式，KVM会创建一个名为virbr0的虚拟网桥，但是宿主机和虚拟机对于网桥来说不是平等的了，网桥会把虚拟机藏在背后，虚拟机会被分配一个内网IP，而从外网访问不到虚拟机。</p><h3 id="安装Linux虚拟机"><a href="#安装Linux虚拟机" class="headerlink" title="安装Linux虚拟机"></a>安装Linux虚拟机</h3><p>使用如下命令安装安装Linux虚拟机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo virt-install -n ubuntu_3</span><br><span class="line"> --description <span class="string">"ubuntu_3"</span> </span><br><span class="line"> --os-type=linux --os-variant=ubuntu17.10 --ram=1024 --vcpus=1 </span><br><span class="line"> --disk path=/var/lib/libvirt/images/ubuntu_3.img,bus=virtio,size=50  <span class="comment"># 磁盘位置，大小50G</span></span><br><span class="line"> --network bridge:br0  <span class="comment"># 这里网络选择了桥接模式</span></span><br><span class="line"> --accelerate</span><br><span class="line"> --graphics vnc,listen=0.0.0.0,keymap=en-us  <span class="comment"># VNC监听端口，注意要选择en-us作为key-map，否则键位布局可能会乱</span></span><br><span class="line"> --cdrom /home/zzy/Downloads/ubuntu-18.04-live-server-amd64.iso  <span class="comment"># 安装ISO路径</span></span><br></pre></td></tr></table></figure><h4 id="安装Windows-10虚拟机"><a href="#安装Windows-10虚拟机" class="headerlink" title="安装Windows 10虚拟机"></a>安装Windows 10虚拟机</h4><p>安装Windows 10虚拟机会出现没有virtio驱动的问题，导致安装程序找不到硬盘，需要先下载virtio驱动。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://fedoraproject.org/wiki/Windows_Virtio_Drivers</span><br><span class="line">https://docs.fedoraproject.org/en-US/quick-docs/creating-windows-virtual-machines-using-virtio-drivers/index.html</span><br></pre></td></tr></table></figure><p>创建虚拟机时，将其加入到CD-ROM中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo virt-install -n win10</span><br><span class="line"> --description <span class="string">"win10"</span></span><br><span class="line"> --os-type=win --os-variant=win10</span><br><span class="line"> --ram=4096 --vcpus=2 </span><br><span class="line"> --disk path=/var/lib/libvirt/images/win_10.img,bus=virtio,size=100</span><br><span class="line"> --network bridge:br0</span><br><span class="line"> --accelerate</span><br><span class="line"> --graphics vnc,listen=0.0.0.0,keymap=en-us</span><br><span class="line"> --cdrom=/home/zzy/Downloads/virtio-win.iso</span><br><span class="line"> --cdrom=/home/zzy/Downloads/cn_windows_10_consumer_editions_version_1803_updated_march_2018_x64_dvd_12063766.iso</span><br></pre></td></tr></table></figure><h4 id="使用VNC客户端连接虚拟机"><a href="#使用VNC客户端连接虚拟机" class="headerlink" title="使用VNC客户端连接虚拟机"></a>使用VNC客户端连接虚拟机</h4><p>执行以下命令查看虚拟机的列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo virsh list</span><br></pre></td></tr></table></figure><p>通过上一步查处的虚拟机列表，查看单台机器的VNC端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo virsh vncdisplay ubuntu_3 <span class="comment"># ubuntu_3是虚拟机名称</span></span><br></pre></td></tr></table></figure><p>知道了VNC端口号，就可以使用VNC客户端连接到虚拟机完成安装了。</p><h3 id="QEMU内部用户模式网络"><a href="#QEMU内部用户模式网络" class="headerlink" title="QEMU内部用户模式网络"></a>QEMU内部用户模式网络</h3><p>用户模式网络（默认的网络模式）完全由qemu实现，不依赖其他工具，是qemu使用slirp实现的一整套TCP/IP协议栈，并使用这个协议栈实现了一整套虚拟的NAT网络<br>这种方式优点在于简单、独立性好、不需要root权限，但存在以下三个缺点</p><ul><li>性能较差</li><li>不支持部分网络功能，例如ICMP协议</li><li>不能从宿主机和外部网络访问客户机</li></ul><p>原文链接：<a href="https://segmentfault.com/a/1190000015418876" target="_blank" rel="noopener">https://segmentfault.com/a/1190000015418876</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;&lt;p&gt;首先需要检查一下CPU是否支持虚拟化，执行一下命令来检查/proc/cpuinfo文件中是否又虚拟化相关的字眼，如果有的话表
      
    
    </summary>
    
    
      <category term="KVM虚拟机" scheme="http://www.jiayie.xyz/categories/KVM%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="虚拟机" scheme="http://www.jiayie.xyz/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Debian/Ubuntu/CentOS,网络安装/网络重装/纯净安装-一键脚本</title>
    <link href="http://www.jiayie.xyz/2019/12/13/Debian-Ubuntu-CentOS-%E7%BD%91%E7%BB%9C%E5%AE%89%E8%A3%85-%E7%BD%91%E7%BB%9C%E9%87%8D%E8%A3%85-%E7%BA%AF%E5%87%80%E5%AE%89%E8%A3%85-%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC/"/>
    <id>http://www.jiayie.xyz/2019/12/13/Debian-Ubuntu-CentOS-%E7%BD%91%E7%BB%9C%E5%AE%89%E8%A3%85-%E7%BD%91%E7%BB%9C%E9%87%8D%E8%A3%85-%E7%BA%AF%E5%87%80%E5%AE%89%E8%A3%85-%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC/</id>
    <published>2019-12-13T10:09:36.000Z</published>
    <updated>2019-12-13T10:18:18.441Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景:"></a>背景:</h4><p>适用于由GRUB引导的CentOS,Ubuntu,Debian系统.<br>使用官方发行版去掉模板预装的软件.<br>同时也可以解决内核版本与软件不兼容的问题。<br>只要有root权限,还您一个纯净的系统。</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h4><ul><li>全自动安装默认root密码:MoeClub.org</li><li>安装完成后请立即更改密码.</li><li>能够全自动重装Debian/Ubuntu/CentOS等系统.</li><li>同时提供dd安装镜像功能,例如: 全自动无救援dd安装windows系统</li><li>全自动安装CentOS时默认提供VNC功能,可使用VNC Viewer查看进度,</li><li>VNC端口为1或者5901,可自行尝试连接.(成功后VNC功能会消失.)</li><li>目前CentOS系统只支持任意版本重装为 CentOS 6.x 及以下版本.</li><li>特别注意:OpenVZ构架不适用.<h4 id="依赖包"><a href="#依赖包" class="headerlink" title="依赖包:"></a>依赖包:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#二进制文件    Debian/Ubuntu    RedHat/CentOS</span></span><br><span class="line">iconv         [libc-bin]       [glibc-common]</span><br><span class="line">xz            [xz-utils]       [xz]</span><br><span class="line">awk           [gawk]           [gawk]</span><br><span class="line">sed           [sed]            [sed]</span><br><span class="line">file          [file]           [file]</span><br><span class="line">grep          [grep]           [grep]</span><br><span class="line">openssl       [openssl]        [openssl]</span><br><span class="line">cpio          [cpio]           [cpio]</span><br><span class="line">gzip          [gzip]           [gzip]</span><br><span class="line">cat,cut..     [coreutils]      [coreutils]</span><br></pre></td></tr></table></figure></li></ul><h4 id="确保安装了所需软件"><a href="#确保安装了所需软件" class="headerlink" title="确保安装了所需软件:"></a>确保安装了所需软件:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Debian/Ubuntu:</span></span><br><span class="line">apt-get install -y xz-utils openssl gawk file</span><br><span class="line"></span><br><span class="line"><span class="comment">#RedHat/CentOS:</span></span><br><span class="line">yum install -y xz openssl gawk file</span><br></pre></td></tr></table></figure><h3 id="如果出现了错误-请运行"><a href="#如果出现了错误-请运行" class="headerlink" title="如果出现了错误,请运行:"></a>如果出现了错误,请运行:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Debian/Ubuntu:</span></span><br><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment">#RedHat/CentOS:</span></span><br><span class="line">yum update</span><br></pre></td></tr></table></figure><h4 id="快速使用示例"><a href="#快速使用示例" class="headerlink" title="快速使用示例:"></a>快速使用示例:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(wget --no-check-certificate -qO- <span class="string">'https://moeclub.org/attachment/LinuxShell/InstallNET.sh'</span>) -d 8 -v 64 -a</span><br></pre></td></tr></table></figure><h4 id="下载及说明"><a href="#下载及说明" class="headerlink" title="下载及说明:"></a>下载及说明:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -qO InstallNET.sh <span class="string">'https://moeclub.org/attachment/LinuxShell/InstallNET.sh'</span> &amp;&amp; chmod a+x InstallNET.sh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line">        bash InstallNET.sh      -d/--debian [dist-name]</span><br><span class="line">                                -u/--ubuntu [dist-name]</span><br><span class="line">                                -c/--centos [dist-version]</span><br><span class="line">                                -v/--ver [32/i386|64/amd64]</span><br><span class="line">                                --ip-addr/--ip-gate/--ip-mask</span><br><span class="line">                                -apt/-yum/--mirror</span><br><span class="line">                                -dd/--image</span><br><span class="line">                                -a/-m</span><br><span class="line"></span><br><span class="line"><span class="comment"># dist-name: 发行版本代号</span></span><br><span class="line"><span class="comment"># dist-version: 发行版本号</span></span><br><span class="line"><span class="comment"># -apt/-yum/--mirror : 使用定义镜像</span></span><br><span class="line"><span class="comment"># -a/-m : 询问是否能进入VNC自行操作. -a 为不提示(一般用于全自动安装), -m 为提示.</span></span><br></pre></td></tr></table></figure><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例:"></a>使用示例:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用默认镜像全自动安装</span></span><br><span class="line">bash InstallNET.sh -d 8 -v 64 -a</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用自定义镜像全自动安装</span></span><br><span class="line">bash InstallNET.sh -c 6.10 -v 64 -a --mirror <span class="string">'http://mirror.centos.org/centos'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下示例中,将X.X.X.X替换为自己的网络参数.</span></span><br><span class="line"><span class="comment"># --ip-addr :IP Address/IP地址</span></span><br><span class="line"><span class="comment"># --ip-gate :Gateway   /网关</span></span><br><span class="line"><span class="comment"># --ip-mask :Netmask   /子网掩码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用自定义镜像全自动安装</span></span><br><span class="line"><span class="comment">#bash InstallNET.sh -d 9 -v 64 -a --mirror 'http://mirrors.ustc.edu.cn/debian/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用自定义镜像自定义网络参数全自动安装</span></span><br><span class="line"><span class="comment">#bash InstallNET.sh -u 16.04 -v 64 -a --ip-addr x.x.x.x --ip-gate x.x.x.x --ip-mask x.x.x.x --mirror 'http://archive.ubuntu.com/ubuntu'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用自定义网络参数全自动dd方式安装</span></span><br><span class="line"><span class="comment">#bash InstallNET.sh --ip-addr x.x.x.x --ip-gate x.x.x.x --ip-mask x.x.x.x -dd 'https://moeclub.org/onedrive/IMAGE/Windows/win7emb_x86.tar.gz'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用自定义网络参数全自动dd方式安装存储在谷歌网盘中的镜像(调用文件ID的方式)</span></span><br><span class="line"><span class="comment">#bash InstallNET.sh --ip-addr x.x.x.x --ip-gate x.x.x.x --ip-mask x.x.x.x -dd "https://image.moeclub.org/GoogleDrive/1cqVl2wSGx92UTdhOxU9pW3wJgmvZMT_J"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用自定义网络参数全自动dd方式安装存储在谷歌网盘中的镜像</span></span><br><span class="line"><span class="comment">#bash InstallNET.sh --ip-addr x.x.x.x --ip-gate x.x.x.x --ip-mask x.x.x.x -dd "https://image.moeclub.org/GoogleDrive/1cqVl2wSGx92UTdhOxU9pW3wJgmvZMT_J"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#国内推荐使用USTC源</span></span><br><span class="line"><span class="comment">#--mirror 'http://mirrors.ustc.edu.cn/debian/'</span></span><br></pre></td></tr></table></figure><h4 id="一些可用镜像地址"><a href="#一些可用镜像地址" class="headerlink" title="一些可用镜像地址:"></a>一些可用镜像地址:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推荐使用带有 /GoogleDrive/ 链接, 速度更快.</span></span><br><span class="line"><span class="comment"># 当然也可以使用自己GoogleDrive中储存的镜像,使用方式:</span></span><br><span class="line">  https://image.moeclub.org/GoogleDrive/</span><br><span class="line"></span><br><span class="line"><span class="comment"># win7emb_x86.tar.gz:</span></span><br><span class="line">  https://image.moeclub.org/GoogleDrive/1srhylymTjYS-Ky8uLw4R6LCWfAo1F3s7 </span><br><span class="line">  https://moeclub.org/onedrive/IMAGE/Windows/win7emb_x86.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># win8.1emb_x64.tar.gz:</span></span><br><span class="line">  https://image.moeclub.org/GoogleDrive/1cqVl2wSGx92UTdhOxU9pW3wJgmvZMT_J</span><br><span class="line">  https://moeclub.org/onedrive/IMAGE/Windows/win8.1emb_x64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># win10ltsc_x64.tar.gz:</span></span><br><span class="line">  https://image.moeclub.org/GoogleDrive/1OVA3t-ZI2arkM4E4gKvofcBN9aoVdneh</span><br><span class="line">  https://moeclub.org/onedrive/IMAGE/Windows/win10ltsc_x64.tar.gz</span><br></pre></td></tr></table></figure><h3 id="注：原文在安装Debian9的时的命令有错吴，本文已做修改。可放心使用"><a href="#注：原文在安装Debian9的时的命令有错吴，本文已做修改。可放心使用" class="headerlink" title="注：原文在安装Debian9的时的命令有错吴，本文已做修改。可放心使用"></a>注：原文在安装Debian9的时的命令有错吴，本文已做修改。可放心使用</h3><p>本文原作者：萌咖<br>原文地址：  <a href="https://moeclub.org/2018/04/03/603/?spm=60.1" target="_blank" rel="noopener">https://moeclub.org/2018/04/03/603/?spm=60.1</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景:&quot;&gt;&lt;/a&gt;背景:&lt;/h4&gt;&lt;p&gt;适用于由GRUB引导的CentOS,Ubuntu,Debian系统.&lt;br&gt;使用官方发行版去掉模板预装的软件.&lt;br&gt;同时也可以解决内核
      
    
    </summary>
    
    
      <category term="一键脚本" scheme="http://www.jiayie.xyz/categories/%E4%B8%80%E9%94%AE%E8%84%9A%E6%9C%AC/"/>
    
    
      <category term="网络重装" scheme="http://www.jiayie.xyz/tags/%E7%BD%91%E7%BB%9C%E9%87%8D%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>hexo的next主题个性化教程</title>
    <link href="http://www.jiayie.xyz/2019/12/12/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E6%95%99%E7%A8%8B/"/>
    <id>http://www.jiayie.xyz/2019/12/12/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E6%95%99%E7%A8%8B/</id>
    <published>2019-12-12T07:19:14.000Z</published>
    <updated>2019-12-12T08:42:30.791Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-在右上角或者左上角实现fork-me-on-github"><a href="#1-在右上角或者左上角实现fork-me-on-github" class="headerlink" title="1. 在右上角或者左上角实现fork me on github"></a>1. 在右上角或者左上角实现fork me on github</h3><p>实现效果图</p><img src="/2019/12/12/hexo的next主题个性化教程/1.jpg"><img src="/2019/12/12/hexo的next主题个性化教程/2.png"><p> 具体实现方法<br>点击<a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="noopener">这里</a>或者<a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">这里</a>挑选自己喜欢的样式，并复制代码。 例如，我是复制如下代码：</p><img src="/2019/12/12/hexo的next主题个性化教程/3.png"><p>然后粘贴刚才复制的代码到 <figure class="highlight plain"><figcaption><span>class</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img 4.png %&#125;</span><br><span class="line">### 2. 添加RSS ###</span><br><span class="line">实现效果图</span><br><span class="line">&#123;% asset_img 5.png %&#125;</span><br><span class="line"> 具体实现方法 </span><br><span class="line">切换到你的blog（我是取名blog，具体的看你们的取名是什么）的路径，例如我是在`/Users/chenzekun/Code/Hexo/blog`这个路径上，也就是在你的根目录下,然后安装 Hexo 插件：(这个插件会放在node_modules这个文件夹里)</span><br><span class="line">```html</span><br><span class="line">npm install --save hexo-generator-feed</span><br></pre></td></tr></table></figure></p><p>然后打开跟目录下的_config.yml配置文件。在里面的末尾添加：(请注意在冒号后面要加一个空格，不然会发生错误！)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: http://hexo.io/plugins/</span><br><span class="line">plugins: hexo-generate-feed</span><br></pre></td></tr></table></figure><p>然后打开next主题文件夹里面的<code>_config.yml</code>,在里面配置为如下样子：(就是在<code>rss:</code>的后面加上<code>/atom.xml</code>,注意在冒号后面要加一个空格)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Set rss to false to disable feed link.</span><br><span class="line"># Leave rss as empty to use site's feed link.</span><br><span class="line"># Set rss to specific value if you have burned your feed already.</span><br><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure><p>配置完之后运行：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>重新生成一次，你会在<code>./public</code> 文件夹中看到<code>atom.xml</code>文件。然后启动服务器查看是否有效，之后再部署到<code>Github</code>中。</p><h4 id="3-实现点击出现桃心效果"><a href="#3-实现点击出现桃心效果" class="headerlink" title="3. 实现点击出现桃心效果"></a>3. 实现点击出现桃心效果</h4><p> 具体实现方法 </p><p>在网址输入如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://7u2ss1.com1.z0.glb.clouddn.com/love.js</span><br></pre></td></tr></table></figure><p>然后将里面的代码copy一下，新建<code>love.js</code>文件并且将代码复制进去，然后保存。将<code>love.js</code>文件放到路径<code>/themes/next/source/js/src</code>里面，然后打开<code>\themes\next\layout\_layout.swig</code>文件,在末尾（在前面引用会出现找不到的bug）添加以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/love.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-修改文章内链接文本样式"><a href="#4-修改文章内链接文本样式" class="headerlink" title="4. 修改文章内链接文本样式"></a>4. 修改文章内链接文本样式</h4><p>实现效果图</p><img src="/2019/12/12/hexo的next主题个性化教程/6.png"><p> 具体实现方法<br>修改文件<code>themes\next\source\css\_common\components\post\post.styl</code>，在末尾添加如下css样式，：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 文章内链接文本样式</span><br><span class="line">.post-body p a&#123;</span><br><span class="line">  color: #0593d3;</span><br><span class="line">  border-bottom: none;</span><br><span class="line">  border-bottom: 1px solid #0593d3;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: #fc6423;</span><br><span class="line">    border-bottom: none;</span><br><span class="line">    border-bottom: 1px solid #fc6423;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中选择<code>.post-body</code>是为了不影响标题，选择 <code>p</code> 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。</p><h4 id="5-修改文章底部的那个带-号的标签"><a href="#5-修改文章底部的那个带-号的标签" class="headerlink" title="5. 修改文章底部的那个带#号的标签"></a>5. 修改文章底部的那个带#号的标签</h4><p>实现效果图</p><img src="/2019/12/12/hexo的next主题个性化教程/7.png"><p> 具体实现方法<br>修改模板<code>/themes/next/layout/_macro/post.swig</code>，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将 <code>#</code> 换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p><h4 id="6-在每篇文章末尾统一添加“本文结束”标记"><a href="#6-在每篇文章末尾统一添加“本文结束”标记" class="headerlink" title="6. 在每篇文章末尾统一添加“本文结束”标记"></a>6. 在每篇文章末尾统一添加“本文结束”标记</h4><p> 具体实现方法<br>在路径<code>\themes\next\layout\_macro</code>中新建 <code>passage-end-tag.swig</code>文件,并添加以下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;</span>-------------本文结束<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-paw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>感谢您的阅读-------------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着打开<code>\themes\next\layout\_macro\post.swig</code>文件，在<code>post-body</code> 之后， <code>post-footer</code> 之前添加如下画红色部分代码（post-footer之前两个DIV）：</p><img src="/2019/12/12/hexo的next主题个性化教程/8.png"><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include 'passage-end-tag.swig' %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后打开主题配置文件（_config.yml),在末尾添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure><p>完成以上设置之后，在每篇文章之后都会添加如上效果图的样子。</p><h4 id="7-修改作者头像并旋转"><a href="#7-修改作者头像并旋转" class="headerlink" title="7. 修改作者头像并旋转"></a>7. 修改作者头像并旋转</h4><p>打开<code>\themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code>，在里面添加如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line">  /* 头像圆形 */</span><br><span class="line">  border-radius: 80px;</span><br><span class="line">  -webkit-border-radius: 80px;</span><br><span class="line">  -moz-border-radius: 80px;</span><br><span class="line">  box-shadow: inset 0 -1px 0 #333sf;</span><br><span class="line">  /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 </span><br><span class="line">    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/</span><br><span class="line"> </span><br><span class="line">  /* 鼠标经过头像旋转360度 */</span><br><span class="line">  -webkit-transition: -webkit-transform 1.0s ease-out;</span><br><span class="line">  -moz-transition: -moz-transform 1.0s ease-out;</span><br><span class="line">  transition: transform 1.0s ease-out;</span><br><span class="line">&#125;</span><br><span class="line">img:hover &#123;</span><br><span class="line">  /* 鼠标经过停止头像旋转 </span><br><span class="line">  -webkit-animation-play-state:paused;</span><br><span class="line">  animation-play-state:paused;*/</span><br><span class="line">  /* 鼠标经过头像旋转360度 */</span><br><span class="line">  -webkit-transform: rotateZ(360deg);</span><br><span class="line">  -moz-transform: rotateZ(360deg);</span><br><span class="line">  transform: rotateZ(360deg);</span><br><span class="line">&#125;</span><br><span class="line">/* Z 轴旋转动画 */</span><br><span class="line">@-webkit-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-moz-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -moz-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -moz-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-博文压缩"><a href="#8-博文压缩" class="headerlink" title="8. 博文压缩"></a>8. 博文压缩</h4><p>在站点的根目录下执行以下命令：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp -g</span><br><span class="line">npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</span><br></pre></td></tr></table></figure><p>新建<code>gulpfile.js</code>，并填入以下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require('gulp');</span><br><span class="line">var minifycss = require('gulp-minify-css');</span><br><span class="line">var uglify = require('gulp-uglify');</span><br><span class="line">var htmlmin = require('gulp-htmlmin');</span><br><span class="line">var htmlclean = require('gulp-htmlclean');</span><br><span class="line">// 压缩 public 目录 css</span><br><span class="line">gulp.task('minify-css', function() &#123;</span><br><span class="line">    return gulp.src('./public/**/*.css')</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest('./public'));</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩 public 目录 html</span><br><span class="line">gulp.task('minify-html', function() &#123;</span><br><span class="line">  return gulp.src('./public/**/*.html')</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">         removeComments: true,</span><br><span class="line">         minifyJS: true,</span><br><span class="line">         minifyCSS: true,</span><br><span class="line">         minifyURLs: true,</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest('./public'))</span><br><span class="line">&#125;);</span><br><span class="line">// 压缩 public/js 目录 js</span><br><span class="line">gulp.task('minify-js', function() &#123;</span><br><span class="line">    return gulp.src('./public/**/*.js')</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest('./public'));</span><br><span class="line">&#125;);</span><br><span class="line">// 执行 gulp 命令时执行的任务</span><br><span class="line">gulp.task('default', [</span><br><span class="line">    'minify-html','minify-css','minify-js'</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>生成博文是执行 <code>hexo g &amp;&amp; gulp</code>就会根据 <code>gulpfile.js</code>中的配置，对<code>public</code>目录中的静态资源文件进行压缩。</p><h4 id="9-修改-代码块自定义样式"><a href="#9-修改-代码块自定义样式" class="headerlink" title="9. 修改``代码块自定义样式"></a>9. 修改``代码块自定义样式</h4><p>打开<code>\themes\next\source\css\_custom\custom.styl</code>,向里面加入：(颜色可以自己定义)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// Custom styles.</span><br><span class="line">code &#123;</span><br><span class="line">    color: #ff7600;</span><br><span class="line">    background: #fbf7f8;</span><br><span class="line">    margin: 2px;</span><br><span class="line">&#125;</span><br><span class="line">// 大代码块的自定义样式</span><br><span class="line">.highlight, pre &#123;</span><br><span class="line">    margin: 5px 0;</span><br><span class="line">    padding: 5px;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">&#125;</span><br><span class="line">.highlight, code, pre &#123;</span><br><span class="line">    border: 1px solid #d6d6d6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-侧边栏社交小图标设置"><a href="#10-侧边栏社交小图标设置" class="headerlink" title="10. 侧边栏社交小图标设置"></a>10. 侧边栏社交小图标设置</h4> <img src="/2019/12/12/hexo的next主题个性化教程/9.png"><p>打开主题配置文件<code>（_config.yml）</code>，搜索<code>social_icons:</code>,在<a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">图标库</a>找自己喜欢的小图标，并将名字复制在如下位置，保存即可<br> <img src="/2019/12/12/hexo的next主题个性化教程/10.png"></p><h4 id="11-主页文章添加阴影效果"><a href="#11-主页文章添加阴影效果" class="headerlink" title="11. 主页文章添加阴影效果"></a>11. 主页文章添加阴影效果</h4><p> 打开<code>\themes\next\source\css\_custom\custom.styl</code>,向里面加入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line"> .post &#123;</span><br><span class="line">   margin-top: 60px;</span><br><span class="line">   margin-bottom: 60px;</span><br><span class="line">   padding: 25px;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="12-在网站底部加上访问量"><a href="#12-在网站底部加上访问量" class="headerlink" title="12. 在网站底部加上访问量"></a>12. 在网站底部加上访问量</h4><p> 打开<code>\themes\next\layout\_partials\footer.swig</code>文件,在<code>copyright</code>前加上画红线这句话：<br> <img src="/2019/12/12/hexo的next主题个性化教程/11.png"><br>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后再合适的位置添加显示统计的代码，如图：<br> <img src="/2019/12/12/hexo的next主题个性化教程/12.png"><br>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"powered-by"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-user-md"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></span><br><span class="line">  本站访客数:<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这里有两中不同计算方式的统计代码：</p><ul><li><p>pv的方式，单个用户连续点击n篇文章，记录n次访问量</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span>&gt;</span></span><br><span class="line">    本站总访问量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>uv的方式，单个用户连续点击n篇文章，只记录1次访客数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></span><br><span class="line">  本站总访问量<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>添加之后再执行<code>hexo -g，hexo s</code>然后再刷新页面就能看到效果</p><h4 id="13-添加热度"><a href="#13-添加热度" class="headerlink" title="13. 添加热度"></a>13. 添加热度</h4><p>实现效果图<br> <img src="/2019/12/12/hexo的next主题个性化教程/13.png"><br>实现方法<br>next主题集成<code>leanCloud</code>，打开<code>/themes/next/layout/_macro/post.swig</code>,在画红线的区域添加<code>℃</code>：</p><img src="/2019/12/12/hexo的next主题个性化教程/14.png"><p>然后打开，<code>/themes/next/languages/zh-Hans.yml</code>,将画红框的改为热度就可以了</p><img src="/2019/12/12/hexo的next主题个性化教程/15.png"><h4 id="14-网站底部字数统计"><a href="#14-网站底部字数统计" class="headerlink" title="14. 网站底部字数统计"></a>14. 网站底部字数统计</h4><p> 切换到根目录下，然后运行如下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>然后在<code>/themes/next/layout/_partials/footer.swig</code>文件尾部加上：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"theme-info"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"powered-by"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span>博客全站共&#123;&#123; totalcount(site) &#125;&#125;字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="15-添加-README-md-文件"><a href="#15-添加-README-md-文件" class="headerlink" title="15. 添加 README.md 文件"></a>15. 添加 README.md 文件</h4><p> 每个项目下一般都有一个 README.md 文件，但是使用 hexo 部署到仓库后，项目下是没有 README.md 文件的。<br>在 Hexo 目录下的 <code>source</code>根目录下添加一个<code>README.md</code>文件，修改站点配置文件<code>_config.yml</code>，将 <code>skip_render</code> 参数的值设置为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: README.md</span><br></pre></td></tr></table></figure><p>保存退出即可。再次使用<code>hexo d</code> 命令部署博客的时候就不会在渲染 <code>README.md</code> 这个文件了。</p><h4 id="16-设置网站的图标Favicon"><a href="#16-设置网站的图标Favicon" class="headerlink" title="16. 设置网站的图标Favicon"></a>16. 设置网站的图标Favicon</h4><p> 在<a href="http://www.easyicon.net/" target="_blank" rel="noopener">EasyIcon</a>中找一张（32*32）的ico图标,或者去别的网站下载或者制作，并将图标名称改为<code>favicon.ico</code>，然后把图标放在<code>/themes/next/source/images</code>里，并且修改主题配置文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Put your favicon.ico into `hexo-site/source/` directory.</span><br><span class="line">favicon: /favicon.ico</span><br></pre></td></tr></table></figure><h4 id="17-实现统计功能"><a href="#17-实现统计功能" class="headerlink" title="17. 实现统计功能"></a>17. 实现统计功能</h4><p>   阅读时长，字数统计<br> 在根目录下安装 hexo-wordcount,运行：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>然后在主题的配置文件中，配置如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https://github.com/willin/hexo-wordcount</span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true</span><br><span class="line">  min2read: true</span><br></pre></td></tr></table></figure><h4 id="18-在文章底部增加版权信息"><a href="#18-在文章底部增加版权信息" class="headerlink" title="18. 在文章底部增加版权信息"></a>18. 在文章底部增加版权信息</h4><p>  在目录<code>next/layout/_macro/</code>下添加 <code>my-copyright.swig</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.copyright %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"my_post_copyright"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- JS库 sweetalert 可修改路径 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/sweetalert/dist/sweetalert.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>本文标题:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for(page.path) &#125;&#125;"</span>&gt;</span>&#123;&#123; page.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>文章作者:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span> <span class="attr">title</span>=<span class="string">"访问 &#123;&#123; theme.author &#125;&#125; 的个人博客"</span>&gt;</span>&#123;&#123; theme.author &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>发布时间:<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; page.date.format("YYYY年MM月DD日 - HH:mm") &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>最后更新:<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; page.updated.format("YYYY年MM月DD日 - HH:mm") &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>原始链接:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for(page.path) &#125;&#125;"</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; page.title &#125;&#125;"</span>&gt;</span>&#123;&#123; page.permalink &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"copy-path"</span>  <span class="attr">title</span>=<span class="string">"点击复制文章链接"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-clipboard"</span> <span class="attr">data-clipboard-text</span>=<span class="string">"&#123;&#123; page.permalink &#125;&#125;"</span>  <span class="attr">aria-label</span>=<span class="string">"复制成功！"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>许可协议:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-creative-commons"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">"license"</span> <span class="attr">href</span>=<span class="string">"https://creativecommons.org/licenses/by-nc-nd/4.0/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">title</span>=<span class="string">"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)"</span>&gt;</span>署名-非商业性使用-禁止演绎 4.0 国际<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 转载请保留原文链接及作者。<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"> </span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> clipboard = <span class="keyword">new</span> Clipboard(<span class="string">'.fa-clipboard'</span>);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">".fa-clipboard"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">      clipboard.on(<span class="string">'success'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="undefined">        swal(&#123;   </span></span><br><span class="line"><span class="actionscript">          title: <span class="string">""</span>,   </span></span><br><span class="line"><span class="actionscript">          text: <span class="string">'复制成功'</span>,</span></span><br><span class="line"><span class="actionscript">          icon: <span class="string">"success"</span>, </span></span><br><span class="line"><span class="actionscript">          showConfirmButton: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">          &#125;);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">    &#125;);  </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>在目录<code>next/source/css/_common/components/post/</code>下添加<code>my-post-copyright.styl</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">.my_post_copyright &#123;</span><br><span class="line">  width: 85%;</span><br><span class="line">  max-width: 45em;</span><br><span class="line">  margin: 2.8em auto 0;</span><br><span class="line">  padding: 0.5em 1.0em;</span><br><span class="line">  border: 1px solid #d3d3d3;</span><br><span class="line">  font-size: 0.93rem;</span><br><span class="line">  line-height: 1.6em;</span><br><span class="line">  word-break: break-all;</span><br><span class="line">  background: rgba(255,255,255,0.4);</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright p&#123;margin:0;&#125;</span><br><span class="line">.my_post_copyright span &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 5.2em;</span><br><span class="line">  color: #b5b5b5;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .raw &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  width: 5em;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright a &#123;</span><br><span class="line">  color: #808080;</span><br><span class="line">  border-bottom:0;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright a:hover &#123;</span><br><span class="line">  color: #a3d2a3;</span><br><span class="line">  text-decoration: underline;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright:hover .fa-clipboard &#123;</span><br><span class="line">  color: #000;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .post-url:hover &#123;</span><br><span class="line">  font-weight: normal;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .copy-path &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  width: 1em;</span><br><span class="line">  +mobile()&#123;display:none;&#125;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .copy-path:hover &#123;</span><br><span class="line">  color: #808080;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>next/layout/_macro/post.swig</code>，在代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      &#123;% if not is_index %&#125;</span><br><span class="line">        &#123;% include 'wechat-subscriber.swig' %&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之前添加增加如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      &#123;% if not is_index %&#125;</span><br><span class="line">        &#123;% include 'my-copyright.swig' %&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2019/12/12/hexo的next主题个性化教程/16.png"><p>修改<code>next/source/css/_common/components/post/post.styl</code>文件，在最后一行增加代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import "my-post-copyright"</span><br></pre></td></tr></table></figure><p>保存重新生成即可。<br>如果要在该博文下面增加版权信息的显示，需要在 Markdown 中增加<code>copyright: true</code>的设置，类似：<br>如果你觉得每次都要输入<code>copyright: true</code>很麻烦的话,那么在<code>/scaffolds/post.md</code>文件中添加：</p><img src="/2019/12/12/hexo的next主题个性化教程/17.png"><p>这样每次<code>hexo new &quot;你的内容&quot;</code>之后，生成的md文件会自动把<code>copyright:</code>加到里面去<br>(注意：如果解析出来之后，你的原始链接有问题：如：<a href="http://yoursite.com/前端小项目：使用canvas绘画哆啦A梦.html,那么在根目录下`_config.yml`中写成类似这样：）" target="_blank" rel="noopener">http://yoursite.com/前端小项目：使用canvas绘画哆啦A梦.html,那么在根目录下`_config.yml`中写成类似这样：）</a></p><img src="/2019/12/12/hexo的next主题个性化教程/18.png"><h4 id="19-隐藏网页底部powered-By-Hexo-强力驱动"><a href="#19-隐藏网页底部powered-By-Hexo-强力驱动" class="headerlink" title="19.  隐藏网页底部powered By Hexo / 强力驱动"></a>19.  隐藏网页底部powered By Hexo / 强力驱动</h4><p> 打开<code>themes/next/layout/_partials/footer.swig</code>,使用””隐藏之间的代码即可，或者直接删除。位置如图：</p><img src="/2019/12/12/hexo的next主题个性化教程/19.png"><h4 id="20-修改网页底部的桃心"><a href="#20-修改网页底部的桃心" class="headerlink" title="20. 修改网页底部的桃心"></a>20. 修改网页底部的桃心</h4><p>  还是打开<code>themes/next/layout/_partials/footer.swig</code>，找到：</p><img src="/2019/12/12/hexo的next主题个性化教程/20.png"><p>然后还是在<a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">图标库</a>中找到你自己喜欢的图标，然后修改画红线的部分就可以了。</p><h4 id="21-文章加密访问"><a href="#21-文章加密访问" class="headerlink" title="21. 文章加密访问"></a>21. 文章加密访问</h4><p>  打开<code>themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig</code>文件,在以下位置插入这样一段代码：</p><img src="/2019/12/12/hexo的next主题个性化教程/21.png"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (prompt(<span class="string">'请输入文章密码'</span>) !== <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">'密码错误！'</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (history.length === <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                    location.replace(<span class="string">"http://xxxxxxx.xxx"</span>); <span class="comment">// 这里替换成你的首页</span></span></span><br><span class="line"><span class="actionscript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="undefined">                    history.back();</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后在文章上写成类似这样：</p><img src="/2019/12/12/hexo的next主题个性化教程/22.png"><h4 id="22-博文置顶"><a href="#22-博文置顶" class="headerlink" title="22. 博文置顶"></a>22. 博文置顶</h4><p>  修改<code>hero-generator-index</code>插件，把文件：<code>node_modules/hexo-generator-index/lib/generator.js</code> 内的代码替换为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">'use strict';</span><br><span class="line">var pagination = require('hexo-pagination');</span><br><span class="line">module.exports = function(locals)&#123;</span><br><span class="line">  var config = this.config;</span><br><span class="line">  var posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(function(a, b) &#123;</span><br><span class="line">        if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义</span><br><span class="line">            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排</span><br><span class="line">            else return b.top - a.top; // 否则按照top值降序排</span><br><span class="line">        &#125;</span><br><span class="line">        else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        else return b.date - a.date; // 都没定义按照文章日期降序排</span><br><span class="line">    &#125;);</span><br><span class="line">  var paginationDir = config.pagination_dir || 'page';</span><br><span class="line">  return pagination('', posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: ['index', 'archive'],</span><br><span class="line">    format: paginationDir + '/%d/',</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在文章中添加 top 值，数值越大文章越靠前，如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 解决Charles乱码问题</span><br><span class="line">date: 2017-05-22 22:45:48</span><br><span class="line">tags: 技巧</span><br><span class="line">categories: 技巧</span><br><span class="line">copyright: true</span><br><span class="line">top: 100</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h4 id="23-修改字体大小"><a href="#23-修改字体大小" class="headerlink" title="23. 修改字体大小"></a>23. 修改字体大小</h4><p>   打开<code>\themes\next\source\css\ _variables\base.styl</code>文件，将$<code>font-size-base</code>改成16px，如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$font-size-base            =16px</span><br></pre></td></tr></table></figure><h4 id="24-侧边栏推荐阅读"><a href="#24-侧边栏推荐阅读" class="headerlink" title="24. 侧边栏推荐阅读"></a>24. 侧边栏推荐阅读</h4><p>  打开主题配置文件修改成这样就行了(links里面写你想要的链接):</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Blogrolls</span><br><span class="line">links_title: 推荐阅读</span><br><span class="line">#links_layout: block</span><br><span class="line">links_layout: inline</span><br><span class="line">links:</span><br><span class="line">  Web前端导航: http://www.alloyteam.com/nav/</span><br><span class="line">  前端书籍资料: http://www.36zhen.com/t?id=3448</span><br><span class="line">  百度前端技术学院: http://ife.baidu.com/</span><br><span class="line">  google前端开发基础: http://wf.uisdc.com/cn/</span><br></pre></td></tr></table></figure><h4 id="25-自定义鼠标样式"><a href="#25-自定义鼠标样式" class="headerlink" title="25. 自定义鼠标样式"></a>25. 自定义鼠标样式</h4><p>打开<code>themes/next/source/css/_custom/custom.styl</code>,在里面写下如下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 鼠标样式</span><br><span class="line">  * &#123;</span><br><span class="line">      cursor: url("http://om8u46rmb.bkt.clouddn.com/sword2.ico"),auto!important</span><br><span class="line">  &#125;</span><br><span class="line">  :active &#123;</span><br><span class="line">      cursor: url("http://om8u46rmb.bkt.clouddn.com/sword1.ico"),auto!important</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>其中 url 里面必须是 ico 图片，ico 图片可以上传到网上（我是使用七牛云图床），然后获取外链，复制到 url 里就行了</p><h4 id="26-为博客加上萌萌的宠物"><a href="#26-为博客加上萌萌的宠物" class="headerlink" title="26. 为博客加上萌萌的宠物"></a>26. 为博客加上萌萌的宠物</h4><p>   在终端切换到你的博客的路径里，然后输入如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -save hexo-helper-live2d</span><br></pre></td></tr></table></figure><p>然后在在 hexo 的 <code>_config.yml</code>中添加参数：（具体配置可以看<a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">官方文档</a>）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-wanko</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br></pre></td></tr></table></figure><p>然后<code>hexo clean ，hexo g ，hexo d</code>就可以看到了。<br>注意！如果你在 <code>hexo d</code> 的时候出现我下面这个问题</p><img src="/2019/12/12/hexo的next主题个性化教程/23.png"><p>你可以这样，首先删除hexo 下面的<code>.deploy_git</code>文件夹，然后运行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure><p>重新<code>hexo clean,hexo g,hexo d</code>就行了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-在右上角或者左上角实现fork-me-on-github&quot;&gt;&lt;a href=&quot;#1-在右上角或者左上角实现fork-me-on-github&quot; class=&quot;headerlink&quot; title=&quot;1. 在右上角或者左上角实现fork me on github&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>hexo生产sitemap站点地图</title>
    <link href="http://www.jiayie.xyz/2019/12/11/hexo%E7%94%9F%E4%BA%A7sitemap%E7%AB%99%E7%82%B9%E5%9C%B0%E5%9B%BE/"/>
    <id>http://www.jiayie.xyz/2019/12/11/hexo%E7%94%9F%E4%BA%A7sitemap%E7%AB%99%E7%82%B9%E5%9C%B0%E5%9B%BE/</id>
    <published>2019-12-11T04:04:21.000Z</published>
    <updated>2019-12-12T08:48:45.790Z</updated>
    
    <content type="html"><![CDATA[<h4 id="创建站点地图文件"><a href="#创建站点地图文件" class="headerlink" title="创建站点地图文件"></a>创建站点地图文件</h4><p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。</p><p>先安装一下，打开你的hexo博客根目录，分别用下面两个命令来安装针对谷歌和百度的插件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>在博客目录的_config.yml中添加如下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Plugins:</span><br><span class="line">- hexo-generator-baidu-sitemap</span><br><span class="line">- hexo-generator-sitemap</span><br><span class="line"></span><br><span class="line">baidusitemap:</span><br><span class="line">    path: baidusitemap.xml</span><br><span class="line">sitemap:</span><br><span class="line">    path: sitemap.xml</span><br></pre></td></tr></table></figure><p>你的博客根目录的public下面发现生成了sitemap.xml以及baidusitemap.xml就表示成功了</p><h4 id="验证网站所有权"><a href="#验证网站所有权" class="headerlink" title="验证网站所有权"></a>验证网站所有权</h4><p>进入谷歌站点平台<br>先进入<a href="https://www.google.com/webmasters/tools/home?hl=zh-CN" target="_blank" rel="noopener">google站点平台</a>，点击右上角的登录，如果还没有谷歌账号的要先注册一个谷歌账号。然后添加资源，这里选择网址前缀，输入博客首页，例如：<a href="https://mrfzh.github.io" target="_blank" rel="noopener">https://mrfzh.github.io</a></p><img src="/2019/12/11/hexo生产sitemap站点地图/1.png"><p>点击继续</p><p>验证网站所有权<br>使用HTML标记验证<br>我一开始使用HTML文件验证，但试了好几次都不行。后来参考别人的方法使用HTML标记验证成功。</p><img src="/2019/12/11/hexo生产sitemap站点地图/2.png"><p>红色框部分是等会要复制的，注意是复制全部</p><p>修改Next主题（v7.1.0）的配置文件<br>接着打开Next主题的配置文件，将google_site_verification属性设置为true</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Google Webmaster tools verification.</span><br><span class="line"># See: https://www.google.com/webmasters</span><br><span class="line">google_site_verification: true</span><br></pre></td></tr></table></figure><h4 id="配置head-swig文件"><a href="#配置head-swig文件" class="headerlink" title="配置head.swig文件"></a>配置head.swig文件</h4><p>然后配置head.swig文件（根目录\themes\next-reloaded\layout_partials\head\head.swig）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.google_site_verification %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"google-site-verification"</span> <span class="attr">content</span>=<span class="string">"X7_M3eeaLhvcnX4TXnFCfa8gF_OXS5CEpA0zKHEBuLY"</span> /&gt;</span> </span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>将中间那行换成上面红色框部分即可，完成这项步骤后，执行下列命令生成静态文件并且部署到github</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>通过验证<br>执行hexo g -d命令，发现在根目录\public文件夹下新增了sitemap.xml和baidusitemap.xml这两个文件，接着要用到的文件是sitemap.xml（baidusitemap.xml是用于收录百度的，这里用不上）</p><h4 id="提交谷歌站点地图"><a href="#提交谷歌站点地图" class="headerlink" title="提交谷歌站点地图"></a>提交谷歌站点地图</h4><p>接着进入谷歌站点，提交刚才验证网站的站点地图</p><img src="/2019/12/11/hexo生产sitemap站点地图/3.png"><p>接着点击提交就可以了</p><p>等待谷歌收录<br>最后谷歌搜索site:mrfzh.github.io，看下网页是否被谷歌收录</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;创建站点地图文件&quot;&gt;&lt;a href=&quot;#创建站点地图文件&quot; class=&quot;headerlink&quot; title=&quot;创建站点地图文件&quot;&gt;&lt;/a&gt;创建站点地图文件&lt;/h4&gt;&lt;p&gt;站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Goo
      
    
    </summary>
    
    
    
      <category term="站点地图" scheme="http://www.jiayie.xyz/tags/%E7%AB%99%E7%82%B9%E5%9C%B0%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>给Hexo,Next设置阅读全文</title>
    <link href="http://www.jiayie.xyz/2019/12/10/%E7%BB%99Hexo-Next%E8%AE%BE%E7%BD%AE%E9%98%85%E8%AF%BB%E5%85%A8%E6%96%87/"/>
    <id>http://www.jiayie.xyz/2019/12/10/%E7%BB%99Hexo-Next%E8%AE%BE%E7%BD%AE%E9%98%85%E8%AF%BB%E5%85%A8%E6%96%87/</id>
    <published>2019-12-10T15:59:19.000Z</published>
    <updated>2019-12-10T16:04:57.476Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 的 Next 主题默认是首页显示你每篇文章的全文内容，但这会使你的首页篇幅过于冗长，针对这个问题我们可以这么做：<br>用编辑器打开themes/next 目录下的_config.yml文件</p><p>*1找到代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_excerpt:</span><br><span class="line">      enable: false</span><br><span class="line">      length: 150</span><br></pre></td></tr></table></figure><p>将enable的 false改成true，length可以设定文章预览的文本长度。<br>*2在文章中使用&lt; !–more–&gt; 手动进行截断<br>这种方法可以根据文章的内容，自己在合适的位置添加 &lt; !–more–&gt; 标签，使用灵活，也是Hexo推荐的方法。</p><img src="/2019/12/10/给Hexo-Next设置阅读全文/1.png"><p>*3在文章中的front-matter中添加description，并提供文章摘录<br>这种方式只会在首页列表中显示文章的摘要内容，进入文章详情后不会再显示。</p><img src="/2019/12/10/给Hexo-Next设置阅读全文/1.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hexo 的 Next 主题默认是首页显示你每篇文章的全文内容，但这会使你的首页篇幅过于冗长，针对这个问题我们可以这么做：&lt;br&gt;用编辑器打开themes/next 目录下的_config.yml文件&lt;/p&gt;
&lt;p&gt;*1找到代码：&lt;/p&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hexo博客添加google,adsense广告</title>
    <link href="http://www.jiayie.xyz/2019/12/10/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0google-adsense%E5%B9%BF%E5%91%8A/"/>
    <id>http://www.jiayie.xyz/2019/12/10/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0google-adsense%E5%B9%BF%E5%91%8A/</id>
    <published>2019-12-10T15:26:10.000Z</published>
    <updated>2019-12-11T04:53:33.563Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.google.com/adsense/app" target="_blank" rel="noopener">添加google adsense广告</a><br>经过一番折腾,终于搞定,现将方法记录如下.</p><p>在主题中添加广告位置<br>此处与自己在用的maupassant主题为例,其他的大同小异.</p><a id="more"></a><p>打开主题目录下的_config.yml文件,添加个广告控制开关</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">widgets_on_small_screens: false ## Set to true to enable widgets on small screens.</span><br><span class="line">show_ad_post: true  ##如需要开启广告位,设置为 true</span><br><span class="line">menu:</span><br></pre></td></tr></table></figure><p>打开主题模板,在对应位置添加广告代码.我这是在文章页底部,评论框上方添加,所以打开主题目录\layout\post.jade</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#这里的代码已经是按jade语法改造后的代码</span><br><span class="line">if theme.show_ad_post == true #对应主题配置中添加的开关</span><br><span class="line">    script(async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js")</span><br><span class="line">    ins.adsbygoogle(style="display:block" data-ad-client="ca-pub-7390437336363898" data-ad-slot="9075736497" data-ad-format="auto")</span><br><span class="line">    script (adsbygoogle = window.adsbygoogle || []).push(&#123;&#125;);</span><br></pre></td></tr></table></figure><p>jade变更为pug后，代码格式稍有变更：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">script(async='' src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js")</span><br><span class="line">ins.adsbygoogle(style="display:block" data-ad-client="#&#123;theme.adsense.google_ad_client&#125;" data-ad-format="auto")</span><br><span class="line">script.</span><br><span class="line">  (adsbygoogle = window.adsbygoogle || []).push(&#123;&#125;);</span><br></pre></td></tr></table></figure><p>保存发布即可看到效果.如果是在本地测试,那么请hosts劫持访问才会显示广告.</p><p>获取adsense代码并按jade语法改造<br>原生广告代码如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 自适应 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span> <span class="attr">class</span>=<span class="string">"adsbygoogle"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">style</span>=<span class="string">"display:block"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">data-ad-client</span>=<span class="string">"ca-pub-7390437336363898"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">data-ad-slot</span>=<span class="string">"9075736497"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">data-ad-format</span>=<span class="string">"auto"</span>&gt;</span><span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">(adsbygoogle = <span class="built_in">window</span>.adsbygoogle || []).push(&#123;&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样直接贴到主题模板中或在模板中引用的时候将会提示错误</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ERROR Process failed: layout/_custom_ad/google.jade</span><br><span class="line">Error: C:\Users\xxx\Hexo\themes\maupassant\layout\_custom_ad\google.jade:6</span><br><span class="line">...</span><br><span class="line">  \&gt; 6|          style="display:block"</span><br><span class="line">...</span><br><span class="line">unexpected token "indent"</span><br></pre></td></tr></table></figure><p>我们需要将其按jade语法改造成这样才可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">script(async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;)</span><br><span class="line">ins.adsbygoogle(style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-7390437336363898&quot; data-ad-slot=&quot;9075736497&quot; data-ad-format=&quot;auto&quot;)</span><br><span class="line">script (adsbygoogle = window.adsbygoogle || []).push(&#123;&#125;);</span><br></pre></td></tr></table></figure><p>也尝试过把代码放在html中,然后主题中include html,但这样会造成一个页面里有多个<head><meta name="generator" content="Hexo 3.9.0">等网页元素,相当于产生了多重引用,不推荐.<br>本文作者：凹凸曼达人<br>本文链接：<a href="https://sobaigu.com/hexo-add-google-adsense.html" target="_blank" rel="noopener">https://sobaigu.com/hexo-add-google-adsense.html</a><link rel="alternate" href="/atom.xml" title="小强" type="application/atom+xml"></head></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.google.com/adsense/app&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;添加google adsense广告&lt;/a&gt;&lt;br&gt;经过一番折腾,终于搞定,现将方法记录如下.&lt;/p&gt;
&lt;p&gt;在主题中添加广告位置&lt;br&gt;此处与自己在用的maupassant主题为例,其他的大同小异.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Hexo博客添加google adsense广告" scheme="http://www.jiayie.xyz/tags/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0google-adsense%E5%B9%BF%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>一键安装KMS服务脚本</title>
    <link href="http://www.jiayie.xyz/2019/08/08/%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85KMS%E6%9C%8D%E5%8A%A1%E8%84%9A%E6%9C%AC/"/>
    <id>http://www.jiayie.xyz/2019/08/08/%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85KMS%E6%9C%8D%E5%8A%A1%E8%84%9A%E6%9C%AC/</id>
    <published>2019-08-08T03:30:15.000Z</published>
    <updated>2019-08-08T03:38:33.125Z</updated>
    
    <content type="html"><![CDATA[<p>秋水逸冰 » 一键安装KMS服务脚本<br>KMS，是 Key Management System 的缩写，也就是密钥管理系统。这里所说的 KMS，毋庸置疑就是用来激活 VOL 版本的 Windows 和 Office 的 KMS 啦。经常能在网上看到有人提供的 KMS 服务器地址，那么你有没有想过自己也来搞一个这样的服务呢？而这样的服务在 Github 上已经有开源代码实现了。<br>本文就是在这个开源代码的基础上，开发了适用于三大 Linux 发行版的一键安装 KMS 服务的脚本。</p><h1 id="本脚本适用环境"><a href="#本脚本适用环境" class="headerlink" title="本脚本适用环境"></a>本脚本适用环境</h1><p>系统支持：CentOS 6+，Debian 7+，Ubuntu 12+<br>虚拟技术：任意<br>内存要求：≥128M<br>日期　　：2018 年 10 月 25 日</p><a id="more"></a><h2 id="关于本脚本"><a href="#关于本脚本" class="headerlink" title="关于本脚本"></a>关于本脚本</h2><p>1、本脚本适用于三大 Linux 发行版，其他版本则不支持。<br>2、KMS 服务安装完成后会加入开机自启动。<br>3、默认记录日志，其日志位于 /var/log/vlmcsd.log。</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>使用root用户登录，运行以下命令：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --<span class="keyword">no</span>-check-certificate http<span class="variable">s:</span>//github.<span class="keyword">com</span>/teddysun/across/raw/master/kms.<span class="keyword">sh</span> &amp;&amp; chmod +<span class="keyword">x</span> kms.<span class="keyword">sh</span> &amp;&amp; ./kms.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><p>安装完成后，输入以下命令查看端口号 1688 的监听情况</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -nxtlp <span class="string">| grep 1688</span></span><br></pre></td></tr></table></figure><p>返回值类似于如下这样就表示 OK 了：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">1688</span>                <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*                   LISTEN      <span class="number">3200</span>/vlmcsd         </span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> :::<span class="number">1688</span>                     :::*                        LISTEN      <span class="number">3200</span>/vlmcsd</span><br></pre></td></tr></table></figure><p>本脚本安装完成后，会将 KMS 服务加入开机自启动。</p><h4 id="使用命令："><a href="#使用命令：" class="headerlink" title="使用命令："></a>使用命令：</h4><p>启动：/etc/init.d/kms start<br>停止：/etc/init.d/kms stop<br>重启：/etc/init.d/kms restart<br>状态：/etc/init.d/kms status</p><h4 id="卸载方法："><a href="#卸载方法：" class="headerlink" title="卸载方法："></a>卸载方法：</h4><p>使用 root 用户登录，运行以下命令：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kms<span class="selector-class">.sh</span> uninstall</span><br></pre></td></tr></table></figure><h4 id="如何使用-KMS-服务"><a href="#如何使用-KMS-服务" class="headerlink" title="如何使用 KMS 服务"></a>如何使用 KMS 服务</h4><p>KMS 服务，用于在线激活 VOL 版本的 Windows 和 Office。<br>激活的前提是你的系统是批量授权版本，即 VL 版，一般企业版都是 VL 版。而 VL 版本的镜像一般内置 GVLK key，用于 KMS 激活。<br>下面列表里面含有的产品的 VL 版本或者能使用 key 进入 KMS 通道的产品，都支持使用 KMS 激活。</p><p>Office 2019 &amp; Office 2016：<a href="https://docs.microsoft.com/en-us/DeployOffice/vlactivation/gvlks" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/DeployOffice/vlactivation/gvlks</a><br>Office 2013：<a href="https://technet.microsoft.com/zh-cn/library/dn385360.aspx" target="_blank" rel="noopener">https://technet.microsoft.com/zh-cn/library/dn385360.aspx</a><br>Office 2010：<a href="https://technet.microsoft.com/zh-cn/library/ee624355(v=office.14).aspx" target="_blank" rel="noopener">https://technet.microsoft.com/zh-cn/library/ee624355(v=office.14).aspx</a><br>Windows：<a href="https://docs.microsoft.com/zh-cn/windows-server/get-started/kmsclientkeys" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/windows-server/get-started/kmsclientkeys</a></p><p>使用管理员权限运行 cmd 查看系统版本，命令如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic os <span class="builtin-name">get</span> caption</span><br></pre></td></tr></table></figure><p>使用管理员权限运行 cmd 安装从上面列表得到的 key，命令如下：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slmgr <span class="string">/ipk</span> xxxxx-xxxxx-xxxxx-xxxxx-xxxxx</span><br></pre></td></tr></table></figure><p>使用管理员权限运行 cmd 将 KMS 服务器地址设置为你自己的 IP 或 域名，后面最好再加上端口号（:1688），命令如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slmgr /skms Your<span class="built_in"> IP </span><span class="keyword">or</span> Domain:1688</span><br></pre></td></tr></table></figure><p>注意：本脚本所做的工作就是此步骤。当你的 KMS 服务出于启动状态，那么此处就可以设置为你自己的 KMS 服务器地址。<br>使用管理员权限运行 cmd 手动激活系统，命令如下：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slmgr <span class="string">/ato</span></span><br></pre></td></tr></table></figure><p>关于 Office 的激活，要求必须是 VOL 版本，否则无法激活。<br>找到你的 Office 安装目录，32 位默认一般为 C:\Program Files (x86)\Microsoft Office\Office16<br>64 位默认一般为 C:\Program Files\Microsoft Office\Office16<br>Office16 是 Office 2016，Office15 就是 Office 2013，Office14 就是 Office 2010。<br>打开以上所说的目录，应该有个 OSPP.VBS 文件。<br>使用管理员权限运行 cmd 进入 Office 目录，命令如下：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd "C:<span class="symbol">\P</span>rogram Files (x86)<span class="symbol">\M</span>icrosoft Office<span class="symbol">\O</span>ffice16"</span><br></pre></td></tr></table></figure><p>使用管理员权限运行 cmd 注册 KMS 服务器地址：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cscript ospp.vbs /sethst:Your<span class="built_in"> IP </span><span class="keyword">or</span> Domain</span><br></pre></td></tr></table></figure><p>使用管理员权限运行 cmd 手动激活 Office，命令如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cscript ospp<span class="selector-class">.vbs</span> /act</span><br></pre></td></tr></table></figure><p>注意： KMS 方式激活，其有效期只有 180 天。<br>每隔一段时间系统会自动向 KMS 服务器请求续期，请确保你自己的 KMS 服务正常运行。</p><p>常见错误的对策<br>如果遇到在执行过程报错，请按以下步骤检查：<br>1，你的 KMS 服务器是否挂了？<br>2，你的 KMS 服务是否正常开启？<br>3，你的系统或 Office 是否为批量 VL 版本？<br>4，你的系统或 Office 是否修改过 Key 或未安装 GVLK Key？<br>5，你是否以管理员权限运行 cmd？<br>6，你的网络连接是否正常？<br>7，你的本地 DNS 解析是否正常？<br>8，如果你排除了以上的对策，那请根据错误提示代码自行搜索原因。</p><p>更新日志<br>2018 年 10 月 25 日：修正 vlmcsd 的 git 链接，即每次全新安装皆为官方的最新版本。注意：如果你想升级版本，则需要先停止 kms 服务，再删除 /usr/bin/vlmcsd 文件，然后重新下载最新脚本安装即可。</p><p>参考链接<br><a href="https://03k.org/kms.html" target="_blank" rel="noopener">https://03k.org/kms.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;秋水逸冰 » 一键安装KMS服务脚本&lt;br&gt;KMS，是 Key Management System 的缩写，也就是密钥管理系统。这里所说的 KMS，毋庸置疑就是用来激活 VOL 版本的 Windows 和 Office 的 KMS 啦。经常能在网上看到有人提供的 KMS 服务器地址，那么你有没有想过自己也来搞一个这样的服务呢？而这样的服务在 Github 上已经有开源代码实现了。&lt;br&gt;本文就是在这个开源代码的基础上，开发了适用于三大 Linux 发行版的一键安装 KMS 服务的脚本。&lt;/p&gt;
&lt;h1 id=&quot;本脚本适用环境&quot;&gt;&lt;a href=&quot;#本脚本适用环境&quot; class=&quot;headerlink&quot; title=&quot;本脚本适用环境&quot;&gt;&lt;/a&gt;本脚本适用环境&lt;/h1&gt;&lt;p&gt;系统支持：CentOS 6+，Debian 7+，Ubuntu 12+&lt;br&gt;虚拟技术：任意&lt;br&gt;内存要求：≥128M&lt;br&gt;日期　　：2018 年 10 月 25 日&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>shadowsocks一键安装脚本（四合一）-秋水逸冰</title>
    <link href="http://www.jiayie.xyz/2019/06/27/Shadowsocks%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%EF%BC%88%E5%9B%9B%E5%90%88%E4%B8%80%EF%BC%89-%E7%A7%8B%E6%B0%B4%E9%80%B8%E5%86%B0/"/>
    <id>http://www.jiayie.xyz/2019/06/27/Shadowsocks%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%EF%BC%88%E5%9B%9B%E5%90%88%E4%B8%80%EF%BC%89-%E7%A7%8B%E6%B0%B4%E9%80%B8%E5%86%B0/</id>
    <published>2019-06-27T03:32:19.000Z</published>
    <updated>2019-06-27T03:52:14.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="本脚本适用环境"><a href="#本脚本适用环境" class="headerlink" title="本脚本适用环境"></a>本脚本适用环境</h4><p>系统支持：CentOS 6+，Debian 7+，Ubuntu 12+<br>内存要求：≥128M<br>日期　　：2019 年 01 月 11 日<br>关于本脚本<br>1、一键安装 Shadowsocks-Python， ShadowsocksR， Shadowsocks-Go， Shadowsocks-libev 版（四选一）服务端；<br>2、各版本的启动脚本及配置文件名不再重合；<br>3、每次运行可安装一种版本；<br>4、支持以多次运行来安装多个版本，且各个版本可以共存（注意端口号需设成不同）；<br>5、若已安装多个版本，则卸载时也需多次运行（每次卸载一种）；</p><p>友情提示：如果你有问题，请先阅读这篇《<a href="https://teddysun.com/399.html" target="_blank" rel="noopener">Shadowsocks Troubleshooting</a>》之后再询问。</p><a id="more"></a><p>默认配置<br>服务器端口：自己设定（如不设定，默认从 9000-19999 之间随机生成）<br>密码：自己设定（如不设定，默认为 teddysun.com）<br>加密方式：自己设定（如不设定，Python 和 libev 版默认为 aes-256-gcm，R 和 Go 版默认为 aes-256-cfb）<br>协议（protocol）：自己设定（如不设定，默认为 origin）（仅限 ShadowsocksR 版）<br>混淆（obfs）：自己设定（如不设定，默认为 plain）（仅限 ShadowsocksR 版）<br>备注：脚本默认创建单用户配置文件，如需配置多用户，请手动修改相应的配置文件后重启即可。</p><h4 id="客户端下载"><a href="#客户端下载" class="headerlink" title="客户端下载"></a>客户端下载</h4><p>常规版 Windows 客户端<br><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-windows/releases</a></p><p>ShadowsocksR 版 Windows 客户端<br><a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases" target="_blank" rel="noopener">https://github.com/shadowsocksrr/shadowsocksr-csharp/releases</a></p><p>使用方法<br>使用root用户登录，运行以下命令：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --<span class="keyword">no</span>-check-certificate -O shadowsocks-<span class="keyword">all</span>.<span class="keyword">sh</span> http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/teddysun/shadowsocks_install/master/shadowsocks-<span class="keyword">all</span>.<span class="keyword">sh</span></span><br><span class="line">chmod +<span class="keyword">x</span> shadowsocks-<span class="keyword">all</span>.<span class="keyword">sh</span></span><br><span class="line">./shadowsocks-<span class="keyword">all</span>.<span class="keyword">sh</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> | tee shadowsocks-<span class="keyword">all</span>.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><h4 id="安装完成后，脚本提示如下"><a href="#安装完成后，脚本提示如下" class="headerlink" title="安装完成后，脚本提示如下"></a>安装完成后，脚本提示如下</h4><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Congratulations, your_shadowsocks_version install completed!</span><br><span class="line">Your Server IP        :your_server_ip</span><br><span class="line">Your Server Port      :your_server_port</span><br><span class="line">Your Password         :your_password</span><br><span class="line">Your Encryption <span class="function"><span class="keyword">Method</span>:</span>your_encryption_method</span><br><span class="line"></span><br><span class="line">Your QR Code: (<span class="keyword">For</span> Shadowsocks Windows, OSX, Android <span class="keyword">and</span> iOS clients)</span><br><span class="line"> ss:<span class="comment">//your_encryption_method:your_password@your_server_ip:your_server_port</span></span><br><span class="line">Your QR Code <span class="keyword">has</span> been saved <span class="keyword">as</span> a PNG file path:</span><br><span class="line"> your_path.png</span><br><span class="line"></span><br><span class="line">Welcome <span class="keyword">to</span> visit:https:<span class="comment">//teddysun.com/486.html</span></span><br><span class="line">Enjoy it!</span><br></pre></td></tr></table></figure><h4 id="卸载方法"><a href="#卸载方法" class="headerlink" title="卸载方法"></a>卸载方法</h4><p>若已安装多个版本，则卸载时也需多次运行（每次卸载一种）</p><p>使用root用户登录，运行以下命令：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./shadowsocks-all<span class="selector-class">.sh</span> uninstall</span><br></pre></td></tr></table></figure><h4 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h4><p>启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Shadowsocks-Python 版：</span><br><span class="line">/etc/init.d/shadowsocks-python start | <span class="type">stop</span> | <span class="type">restart</span> | <span class="type">status</span></span><br></pre></td></tr></table></figure><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ShadowsocksR 版：</span><br><span class="line">/etc/init.d/shadowsocks-r start | <span class="type">stop</span> | <span class="type">restart</span> | <span class="type">status</span></span><br></pre></td></tr></table></figure><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Shadowsocks-Go 版：</span><br><span class="line">/etc/init.d/shadowsocks-go start | <span class="type">stop</span> | <span class="type">restart</span> | <span class="type">status</span></span><br></pre></td></tr></table></figure><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Shadowsocks-libev 版：</span><br><span class="line">/etc/init.d/shadowsocks-libev start | <span class="type">stop</span> | <span class="type">restart</span> | <span class="type">status</span></span><br></pre></td></tr></table></figure><p>各版本默认配置文件</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Shadowsocks-Python 版：</span><br><span class="line">/etc/shadowsocks-python/<span class="built_in">config</span>.json</span><br></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ShadowsocksR 版：</span><br><span class="line">/etc/shadowsocks-r/<span class="built_in">config</span>.json</span><br></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Shadowsocks-Go 版：</span><br><span class="line">/etc/shadowsocks-go/<span class="built_in">config</span>.json</span><br></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Shadowsocks-libev 版：</span><br><span class="line">/etc/shadowsocks-libev/<span class="built_in">config</span>.json</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;本脚本适用环境&quot;&gt;&lt;a href=&quot;#本脚本适用环境&quot; class=&quot;headerlink&quot; title=&quot;本脚本适用环境&quot;&gt;&lt;/a&gt;本脚本适用环境&lt;/h4&gt;&lt;p&gt;系统支持：CentOS 6+，Debian 7+，Ubuntu 12+&lt;br&gt;内存要求：≥128M&lt;br&gt;日期　　：2019 年 01 月 11 日&lt;br&gt;关于本脚本&lt;br&gt;1、一键安装 Shadowsocks-Python， ShadowsocksR， Shadowsocks-Go， Shadowsocks-libev 版（四选一）服务端；&lt;br&gt;2、各版本的启动脚本及配置文件名不再重合；&lt;br&gt;3、每次运行可安装一种版本；&lt;br&gt;4、支持以多次运行来安装多个版本，且各个版本可以共存（注意端口号需设成不同）；&lt;br&gt;5、若已安装多个版本，则卸载时也需多次运行（每次卸载一种）；&lt;/p&gt;
&lt;p&gt;友情提示：如果你有问题，请先阅读这篇《&lt;a href=&quot;https://teddysun.com/399.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Shadowsocks Troubleshooting&lt;/a&gt;》之后再询问。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="shadowsocks 四合一" scheme="http://www.jiayie.xyz/tags/shadowsocks-%E5%9B%9B%E5%90%88%E4%B8%80/"/>
    
  </entry>
  
  <entry>
    <title>N1刷入Armbian后换软件源、安装Docker并提速</title>
    <link href="http://www.jiayie.xyz/2019/06/26/N1%E5%88%B7%E5%85%A5Armbian%E5%90%8E%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90%E3%80%81%E5%AE%89%E8%A3%85Docker%E5%B9%B6%E6%8F%90%E9%80%9F/"/>
    <id>http://www.jiayie.xyz/2019/06/26/N1%E5%88%B7%E5%85%A5Armbian%E5%90%8E%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90%E3%80%81%E5%AE%89%E8%A3%85Docker%E5%B9%B6%E6%8F%90%E9%80%9F/</id>
    <published>2019-06-26T01:25:53.000Z</published>
    <updated>2019-06-26T01:58:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章转自恩山原地址： <a href="https://www.right.com.cn/forum/thread-430903-1-1.html" target="_blank" rel="noopener">N1刷入Armbian</a><br>网络环境所限，在使用Armbian的时候经常下载软件出问题，下载不到或者下载中断，所以找来了国内的源，更换一下，下载会变快很多。</p><p>假定armbian已经安装完成</p><p>1、打开putty，输入N1的IP地址连接并登陆</p><img src="/2019/06/26/N1刷入Armbian后换软件源、安装Docker并提速/1.png"><a id="more"></a><p>2、输入命令 </p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/apt/sources.<span class="built_in">list</span></span><br></pre></td></tr></table></figure><p>3、在原先的源前面加#号注释掉，并将国内源复制过去</p><img src="/2019/06/26/N1刷入Armbian后换软件源、安装Docker并提速/2.png"><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.ustc.edu.cn/debian stretch main contrib non-free</span></span><br><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.ustc.edu.cn/debian stretch-updates main contrib non-free</span></span><br><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.ustc.edu.cn/debian stretch-backports main contrib non-free</span></span><br><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.ustc.edu.cn/debian-security/ stretch/updates main contrib non-free</span></span><br></pre></td></tr></table></figure><p>4、ctrl+x退出编辑，按y回车保存<br>5、执行</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="keyword">get</span> <span class="keyword">update</span></span><br></pre></td></tr></table></figure><p>至此，软件源更换完毕。</p><p>6、安装docker</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">curl </span>-<span class="string">fsSL </span><span class="string">https:</span>//<span class="string">get.</span><span class="string">docker.</span><span class="string">com </span>-o <span class="built_in">get-docker.sh</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">sh</span> <span class="built_in">get-docker.sh</span> <span class="built_in">--mirror</span> <span class="string">Aliyun</span></span><br></pre></td></tr></table></figure><p>使用上述命令安装会调用阿里云的镜像，安装速度较快。</p><p>7、配置docker镜像加速<br>登陆</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dev<span class="selector-class">.aliyun</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure><p>进入容器镜像服务，得到镜像加速器地址</p><img src="/2019/06/26/N1刷入Armbian后换软件源、安装Docker并提速/3.png"><p>8、putty下执行</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mkdir -<span class="selector-tag">p</span> /etc/docker</span><br><span class="line"></span><br><span class="line">tee /etc/docker/daemon<span class="selector-class">.json</span> &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"registry-mirrors"</span>: [<span class="string">"https://加速镜像地址"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>9、安装docker图形化管理Portainer  </p><p>在putty下执行</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker volume create portainer_data</span><br><span class="line"></span><br><span class="line">docker run -d -p <span class="number">9000</span>:<span class="number">9000</span> -v <span class="regexp">/var/</span>run<span class="regexp">/docker.sock:/</span>var<span class="regexp">/run/</span>docker.sock -v <span class="string">portainer_data:</span><span class="regexp">/data portainer/</span><span class="string">portainer:</span>linux-arm64</span><br></pre></td></tr></table></figure><p>10、安装完成后可访问N1ip:9000查看图形化界面</p><img src="/2019/06/26/N1刷入Armbian后换软件源、安装Docker并提速/4.png"><p>运行镜像加入–restart=always，开机自启，已经创建容器的可以用：docker update –restart=always Portainer 更新设置</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章转自恩山原地址： &lt;a href=&quot;https://www.right.com.cn/forum/thread-430903-1-1.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;N1刷入Armbian&lt;/a&gt;&lt;br&gt;网络环境所限，在使用Armbian的时候经常下载软件出问题，下载不到或者下载中断，所以找来了国内的源，更换一下，下载会变快很多。&lt;/p&gt;
&lt;p&gt;假定armbian已经安装完成&lt;/p&gt;
&lt;p&gt;1、打开putty，输入N1的IP地址连接并登陆&lt;/p&gt;
&lt;img src=&quot;/2019/06/26/N1刷入Armbian后换软件源、安装Docker并提速/1.png&quot;&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>小钢炮docker运行op且做旁路由的问题</title>
    <link href="http://www.jiayie.xyz/2019/06/26/%E5%B0%8F%E9%92%A2%E7%82%AEdocker%E8%BF%90%E8%A1%8Cop%E4%B8%94%E5%81%9A%E6%97%81%E8%B7%AF%E7%94%B1%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://www.jiayie.xyz/2019/06/26/%E5%B0%8F%E9%92%A2%E7%82%AEdocker%E8%BF%90%E8%A1%8Cop%E4%B8%94%E5%81%9A%E6%97%81%E8%B7%AF%E7%94%B1%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2019-06-26T01:21:18.000Z</published>
    <updated>2019-06-26T01:23:08.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li>刷入小钢炮并开启DOCKER，这个在灯大的网站里有详细的步骤，我就不赘述了</li><li>拉取op进Docker，可分为5小步：<br>1）SSH登录小钢炮ip，运行 docker pull kanshudj/n1-openwrtgateway<br>2）运行 ip link set eth0 promisc on<br>3）运行 docker network create -d macvlan –subnet=192.168.1.0/24 –gateway=192.168.1.1 -o parent=eth0 macnet<br>注意将上述192.168.1.0及192.168.1.1替换为你的主路由网段，如192.168.2.0与192.168.2.1<br>4）运行 docker run –restart always -d –network macnet –privileged kanshudj/n1-openwrtgateway /sbin/init<br>5）进docker管理页面里的命令输入行，运行vi /etc/config/network<br>按一下i键编辑网络参数，将其中倒数第五行192.168.0.2替换为你想登录op的ip，注意其应在主路由网段内，如192.168.2.2，最后两行中的192.168.0.1替换为192.168.2.1<br>依次按esc : w q 后回车，restart一下op进入op管理页面（如192.168.2.2）</li><li>路由模式设置<br>1）主路由<br>接口—LAN—修改—DHCP服务器—高级设置—DHCP选项添加以下两行：3,192.168.2.2与6,192.168.2.2<br>2）N1 op<br>接口—LAN—编辑—物理设置—取消桥接接口<br>重启主路由及N1，电脑重新获取ip，查看网关及DNS服务器为op地址则成功，小钢炮功能正常使用！3</li></ol><p>上述方法设置会让小钢炮使用docker里op的网关导致小钢炮的下载工具没有下载速度，<br>方法如下：<br>小钢炮管理—SYSTEM—NETWORK，选择固定IP，将ipv4设置为固定值（如你管理小钢炮的ip），将路由（routers）与DNS指向主路由的ip（如192.168.2.1），重启小钢炮与主路由。<br>不足：小钢炮仅可正常下载国内资源。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;刷入小钢炮并开启DOCKER，这个在灯大的网站里有详细的步骤，我就不赘述了&lt;/li&gt;
&lt;li&gt;拉取op进Docker，可分为5小步：&lt;br&gt;1）SSH登录小钢炮ip，运行 docker pull kanshudj/n1-openwrtgateway&lt;br&gt;2）运
      
    
    </summary>
    
    
    
      <category term="小钢炮 docker op" scheme="http://www.jiayie.xyz/tags/%E5%B0%8F%E9%92%A2%E7%82%AE-docker-op/"/>
    
  </entry>
  
  <entry>
    <title>N1-openwrt镜像教程</title>
    <link href="http://www.jiayie.xyz/2019/06/21/N1-openwrt%E9%95%9C%E5%83%8F%E6%95%99%E7%A8%8B/"/>
    <id>http://www.jiayie.xyz/2019/06/21/N1-openwrt%E9%95%9C%E5%83%8F%E6%95%99%E7%A8%8B/</id>
    <published>2019-06-21T01:59:31.000Z</published>
    <updated>2019-06-21T02:22:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>编译好的op固件和armbain镜像放在同一个文件夹目录 新建一个openwrt文件夹</strong></p><img src="/2019/06/21/N1-openwrt镜像教程/1.jpg"><p><strong>解压N1 openwr固件到openwrt目录</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvf openwrt-armvirt-<span class="number">64</span>-default-rootfs<span class="selector-class">.tar</span><span class="selector-class">.gz</span> -C openwrt</span><br></pre></td></tr></table></figure><img src="/2019/06/21/N1-openwrt镜像教程/2.jpg"><a id="more"></a><h4 id="挂载-Armbian-镜像文件"><a href="#挂载-Armbian-镜像文件" class="headerlink" title="挂载 Armbian 镜像文件"></a>挂载 Armbian 镜像文件</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo losetup -P -f --show <span class="module-access"><span class="module"><span class="identifier">Armbian</span>.</span></span>img</span><br></pre></td></tr></table></figure><img src="/2019/06/21/N1-openwrt镜像教程/3.jpg"><p><strong>挂载镜像分区到文件夹</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount <span class="string">/dev/loop11p2</span> <span class="string">/media</span>  【<span class="string">/devloop11</span> 换成你自己的】</span><br></pre></td></tr></table></figure><img src="/2019/06/21/N1-openwrt镜像教程/4.jpg"><h4 id="把armbian的文件拉到openwrt里"><a href="#把armbian的文件拉到openwrt里" class="headerlink" title="把armbian的文件拉到openwrt里"></a>把armbian的文件拉到openwrt里</h4><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf openwrt/<span class="class"><span class="keyword">lib</span>/<span class="title">firmware</span>/</span></span><br><span class="line">sudo rm -rf openwrt/<span class="class"><span class="keyword">lib</span>/<span class="title">modules</span>/</span></span><br><span class="line">sudo mv /media/<span class="class"><span class="keyword">lib</span>/<span class="title">modules</span>/ <span class="title">openwrt</span>/<span class="title">lib</span>/</span></span><br><span class="line">sudo mv /media/<span class="class"><span class="keyword">lib</span>/<span class="title">firmware</span>/ <span class="title">openwrt</span>/<span class="title">lib</span>/</span></span><br><span class="line">sudo mv /media/etc/modprobe.d/ openwrt/etc/</span><br><span class="line">sudo mv /media/etc/fstab openwrt/etc/</span><br></pre></td></tr></table></figure><img src="/2019/06/21/N1-openwrt镜像教程/5.jpg"><p><strong>到openwrt/lib/modules/4.18.7-aml-s9xxx目录下创建一个脚本文件</strong></p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd openwrt/<span class="class"><span class="keyword">lib</span>/<span class="title">modules</span>/4.18.7-<span class="title">aml</span>-<span class="title">s9xxx</span></span></span><br><span class="line">执行 sudo vi link-ko.sh</span><br></pre></td></tr></table></figure><img src="/2019/06/21/N1-openwrt镜像教程/6.jpg"><p><strong>添加脚本</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> `<span class="builtin-name">find</span> -name *.ko`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    ln -s <span class="variable">$x</span> .</span><br><span class="line">done</span><br></pre></td></tr></table></figure><img src="/2019/06/21/N1-openwrt镜像教程/7.jpg"><p><strong>保存退出  设置文件权限和链接命令</strong></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">chmod</span> +<span class="keyword">x</span> <span class="keyword">link</span>-ko.sh</span><br><span class="line">sudo ./<span class="keyword">link</span>-ko.sh</span><br></pre></td></tr></table></figure><img src="/2019/06/21/N1-openwrt镜像教程/8.jpg"><p><strong>回到目录编辑openwrt/etc/init.d/boot文件</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi openwrt<span class="regexp">/etc/i</span>nit.d<span class="regexp">/boot</span></span><br></pre></td></tr></table></figure><p>第38行添加叫脚本</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ulimit -n <span class="number">51200</span></span><br></pre></td></tr></table></figure><img src="/2019/06/21/N1-openwrt镜像教程/9.jpg"><p><strong>保存退出</strong></p><p><strong>删除armbian镜像所有文件</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf <span class="regexp">/media/</span>*</span><br></pre></td></tr></table></figure><img src="/2019/06/21/N1-openwrt镜像教程/10.jpg"><p><strong>将openwrt中的所有文件移动到media文件夹</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mv openwrt<span class="regexp">/* /m</span>edia</span><br><span class="line">sudo mkdir <span class="regexp">/media/</span>boot</span><br></pre></td></tr></table></figure><img src="/2019/06/21/N1-openwrt镜像教程/11.jpg"><h4 id="执行-刷新命令-sync-并卸载刚刚挂载的镜像"><a href="#执行-刷新命令-sync-并卸载刚刚挂载的镜像" class="headerlink" title="执行 刷新命令 sync  并卸载刚刚挂载的镜像"></a>执行 刷新命令 sync  并卸载刚刚挂载的镜像</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo umount <span class="string">/media</span>      </span><br><span class="line">sudo losetup -d <span class="string">/dev/loop11</span></span><br></pre></td></tr></table></figure><img src="/2019/06/21/N1-openwrt镜像教程/12.jpg"><h4 id="下载启动wifi-脚本文件"><a href="#下载启动wifi-脚本文件" class="headerlink" title="下载启动wifi 脚本文件"></a><strong>下载启动wifi 脚本文件</strong></h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/maxlicheng/phicomm-n1-wireless.git</span><br></pre></td></tr></table></figure><p><strong>重新挂载刚刚移植好的openwrt镜像</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo losetup -P -f <span class="comment">--show armbian.img</span></span><br></pre></td></tr></table></figure><p><strong>将启动脚本移动到镜像 /media/etc/modules.d 下</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv phicomm-n1-wireless<span class="regexp">/wireless_enable /m</span>edia<span class="regexp">/etc/m</span>odules.d<span class="regexp">/wireless_enable</span></span><br></pre></td></tr></table></figure><p><strong>并查看 该文件是否移动到该目录下</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/media/etc/modules.d</span></span><br></pre></td></tr></table></figure><img src="/2019/06/21/N1-openwrt镜像教程/13.jpg"><p><strong>刷新 sync</strong><br><strong>卸载挂载的镜像</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo umount <span class="string">/media</span></span><br><span class="line">sudo losetup -d <span class="string">/dev/loop11</span></span><br></pre></td></tr></table></figure><img src="/2019/06/21/N1-openwrt镜像教程/14.jpg"><p><strong>到此openwrt固件就制作完成了</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;编译好的op固件和armbain镜像放在同一个文件夹目录 新建一个openwrt文件夹&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;/2019/06/21/N1-openwrt镜像教程/1.jpg&quot;&gt;
&lt;p&gt;&lt;strong&gt;解压N1 openwr固件到openwrt目录&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tar xvf openwrt-armvirt-&lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;-default-rootfs&lt;span class=&quot;selector-class&quot;&gt;.tar&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.gz&lt;/span&gt; -C openwrt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;img src=&quot;/2019/06/21/N1-openwrt镜像教程/2.jpg&quot;&gt;
    
    </summary>
    
    
    
      <category term="N1 镜像" scheme="http://www.jiayie.xyz/tags/N1-%E9%95%9C%E5%83%8F/"/>
    
  </entry>
  
  <entry>
    <title>N1-openwrt固件编译教程</title>
    <link href="http://www.jiayie.xyz/2019/06/21/N1-openwrt%E5%9B%BA%E4%BB%B6%E7%BC%96%E8%AF%91%E6%95%99%E7%A8%8B/"/>
    <id>http://www.jiayie.xyz/2019/06/21/N1-openwrt%E5%9B%BA%E4%BB%B6%E7%BC%96%E8%AF%91%E6%95%99%E7%A8%8B/</id>
    <published>2019-06-21T01:47:06.000Z</published>
    <updated>2019-06-21T02:23:00.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="编译-N1-openwrt固件教程"><a href="#编译-N1-openwrt固件教程" class="headerlink" title="编译 N1 openwrt固件教程"></a>编译 N1 openwrt固件教程</h4><img src="/2019/06/21/N1-openwrt固件编译教程/1.jpg"><p><strong>Firmware 选择如下驱动</strong><br>brcmfmac-firmware-43430-sdio<br>brcmfmac-firmware-43455-sdio<br>brcmfmac-firmware-usb<br>wireless-regdb</p><a id="more"></a><img src="/2019/06/21/N1-openwrt固件编译教程/2.jpg"><img src="/2019/06/21/N1-openwrt固件编译教程/3.jpg"><h4 id="进入Kernel-modules-中Network-Devices选中"><a href="#进入Kernel-modules-中Network-Devices选中" class="headerlink" title="进入Kernel modules 中Network Devices选中"></a>进入Kernel modules 中Network Devices选中</h4><p><strong>kmod-b44</strong></p><img src="/2019/06/21/N1-openwrt固件编译教程/4.jpg"><img src="/2019/06/21/N1-openwrt固件编译教程/5.jpg"><h4 id="Wireless-Drivers-选中如下文件"><a href="#Wireless-Drivers-选中如下文件" class="headerlink" title="Wireless Drivers 选中如下文件"></a>Wireless Drivers 选中如下文件</h4><p>kmod-brcmfmac<br>Enable SDIO bus interface support<br>Enable USB bus interface support<br>kmod-brcmutil<br>kmod-cfg80211</p><img src="/2019/06/21/N1-openwrt固件编译教程/6.jpg"><p>回到主界面 拉到底 Network 选择如下<br>Hostapd<br>hostapd-common<br>hostapd-utils       可选   可不选</p><img src="/2019/06/21/N1-openwrt固件编译教程/7.jpg"><p>需要插件 在Luci - Applications 自行选择<br>保存配置退出<br><strong>make -j1 V=s 开始编译 剩下就是漫长等待</strong></p><h4 id="注意：编译全程挂代理"><a href="#注意：编译全程挂代理" class="headerlink" title="注意：编译全程挂代理"></a>注意：编译全程挂代理</h4>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;编译-N1-openwrt固件教程&quot;&gt;&lt;a href=&quot;#编译-N1-openwrt固件教程&quot; class=&quot;headerlink&quot; title=&quot;编译 N1 openwrt固件教程&quot;&gt;&lt;/a&gt;编译 N1 openwrt固件教程&lt;/h4&gt;&lt;img src=&quot;/2019/06/21/N1-openwrt固件编译教程/1.jpg&quot;&gt;

&lt;p&gt;&lt;strong&gt;Firmware 选择如下驱动&lt;/strong&gt;&lt;br&gt;brcmfmac-firmware-43430-sdio&lt;br&gt;brcmfmac-firmware-43455-sdio&lt;br&gt;brcmfmac-firmware-usb&lt;br&gt;wireless-regdb&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="编译 N1" scheme="http://www.jiayie.xyz/tags/%E7%BC%96%E8%AF%91-N1/"/>
    
  </entry>
  
  <entry>
    <title>office每次打开都需要重新配置</title>
    <link href="http://www.jiayie.xyz/2019/06/20/office%E6%AF%8F%E6%AC%A1%E6%89%93%E5%BC%80%E9%83%BD%E9%9C%80%E8%A6%81%E9%87%8D%E6%96%B0%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.jiayie.xyz/2019/06/20/office%E6%AF%8F%E6%AC%A1%E6%89%93%E5%BC%80%E9%83%BD%E9%9C%80%E8%A6%81%E9%87%8D%E6%96%B0%E9%85%8D%E7%BD%AE/</id>
    <published>2019-06-20T08:56:42.000Z</published>
    <updated>2019-06-20T09:19:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>   每次打开都需要重新配置为什么？</p><p>　　打开命令运行框，用win+r就可以打开，然后输入</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKCU<span class="symbol">\S</span>oftware<span class="symbol">\M</span>icrosoft<span class="symbol">\O</span>ffice<span class="symbol">\1</span>4.0<span class="symbol">\W</span>ord<span class="symbol">\O</span>ptions /v NoReReg /t REG_DWORD /d 1</span><br></pre></td></tr></table></figure><p>按回车就可以了。<br><a href="https://pmjs-my.sharepoint.com/:u:/g/personal/sy2slru5m_my365_tw/EQbPDGYKsahAr6Gmge1Rp0kBMi0qldHjEAVUgPqwf329Rg?e=Z0k7d1" target="_blank" rel="noopener">office2010下载地址</a><br><a href="https://pmjs-my.sharepoint.com/:u:/g/personal/sy2slru5m_my365_tw/Eay-3O-2uP1BresUVwi2qFsBfFsdQYUaXWDeB2mqzIOamQ?e=ewvosM" target="_blank" rel="noopener">Office强力卸载工具</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;   每次打开都需要重新配置为什么？&lt;/p&gt;
&lt;p&gt;　　打开命令运行框，用win+r就可以打开，然后输入&lt;/p&gt;
&lt;figure class=&quot;highlight taggerscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
    
      <category term="office 卸载" scheme="http://www.jiayie.xyz/tags/office-%E5%8D%B8%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令之:du命令</title>
    <link href="http://www.jiayie.xyz/2019/06/14/Linux%E5%91%BD%E4%BB%A4%E4%B9%8B-du%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.jiayie.xyz/2019/06/14/Linux%E5%91%BD%E4%BB%A4%E4%B9%8B-du%E5%91%BD%E4%BB%A4/</id>
    <published>2019-06-14T08:59:46.000Z</published>
    <updated>2019-06-22T07:37:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>Linux du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的.<br>查看磁盘空间： df -h </p><p>1．命令格式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du [<span class="string">选项</span>][<span class="symbol">文件</span>]</span><br></pre></td></tr></table></figure><p>2．命令功能：</p><a id="more"></a><p>显示每个文件和目录的磁盘使用空间。</p><p>3．命令参数：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">-<span class="keyword">a</span>或-all  显示目录中个别文件的大小。   </span><br><span class="line"></span><br><span class="line">-b或-<span class="keyword">bytes</span>  显示目录或文件大小时，以<span class="keyword">byte</span>为单位。   </span><br><span class="line"></span><br><span class="line">-c或<span class="comment">--total  除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。 </span></span><br><span class="line"></span><br><span class="line">-k或<span class="comment">--kilobytes  以KB(1024bytes)为单位输出。</span></span><br><span class="line"></span><br><span class="line">-m或<span class="comment">--megabytes  以MB为单位输出。   </span></span><br><span class="line"></span><br><span class="line">-s或<span class="comment">--summarize  仅显示总计，只列出最后加总的值。</span></span><br><span class="line"></span><br><span class="line">-h或<span class="comment">--human-readable  以K，M，G为单位，提高信息的可读性。</span></span><br><span class="line"></span><br><span class="line">-x或<span class="comment">--one-file-xystem  以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。 </span></span><br><span class="line"></span><br><span class="line">-L&lt;符号链接&gt;或<span class="comment">--dereference&lt;符号链接&gt; 显示选项中所指定符号链接的源文件大小。   </span></span><br><span class="line"></span><br><span class="line">-S或<span class="comment">--separate-dirs   显示个别目录的大小时，并不含其子目录的大小。 </span></span><br><span class="line"></span><br><span class="line">-X&lt;文件&gt;或<span class="comment">--exclude-from=&lt;文件&gt;  在&lt;文件&gt;指定目录或文件。   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">--exclude=&lt;目录或文件&gt;         略过指定的目录或文件。    </span></span><br><span class="line"></span><br><span class="line">-D或<span class="comment">--dereference-args   显示指定符号链接的源文件大小。   </span></span><br><span class="line"></span><br><span class="line">-H或<span class="comment">--si  与-h参数相同，但是K，M，G是以1000为换算单位。   </span></span><br><span class="line"></span><br><span class="line">-l或<span class="comment">--count-links   重复计算硬件链接的文件。  </span></span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>4．使用实例：</p><p>实例1：显示目录或者文件所占空间 </p><p>命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">du</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">root@</span>localhost test]# du</span><br><span class="line"></span><br><span class="line"><span class="number">608</span>     ./test6</span><br><span class="line"></span><br><span class="line"><span class="number">308</span>     ./test4</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>       ./scf/lib</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>       ./scf/service/deploy/product</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>       ./scf/service/deploy/info</span><br><span class="line"></span><br><span class="line"><span class="number">12</span>      ./scf/service/deploy</span><br><span class="line"></span><br><span class="line"><span class="number">16</span>      ./scf/service</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>       ./scf/doc</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>       ./scf/bin</span><br><span class="line"></span><br><span class="line"><span class="number">32</span>      ./scf</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>       ./test3</span><br><span class="line"></span><br><span class="line"><span class="number">1288</span>    .</span><br></pre></td></tr></table></figure><p>[root@localhost test]#</p><p>说明：</p><p>只显示当前目录下面的子目录的目录大小和当前目录的总的大小，最下面的1288为当前目录的总大小</p><p>实例2：显示指定文件所占空间</p><p>命令：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du log2012.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> test]<span class="meta"># du log2012.log </span></span><br><span class="line"></span><br><span class="line"><span class="number">300</span>     log2012.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@localhost</span> test]<span class="meta">#</span></span><br></pre></td></tr></table></figure><p>说明：</p><p>实例3：查看指定目录的所占空间</p><p>命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">du scf</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]<span class="comment"># du scf</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>       scf/<span class="class"><span class="keyword">lib</span></span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span>       scf/service/deploy/product</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>       scf/service/deploy/info</span><br><span class="line"></span><br><span class="line"><span class="number">12</span>      scf/service/deploy</span><br><span class="line"></span><br><span class="line"><span class="number">16</span>      scf/service</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>       scf/doc</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>       scf/bin</span><br><span class="line"></span><br><span class="line"><span class="number">32</span>      scf</span><br><span class="line"></span><br><span class="line">[root@localhost test]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>说明：</p><p>实例4：显示多个文件所占空间</p><p>命令：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du log30<span class="selector-class">.tar</span><span class="selector-class">.gz</span> log31<span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@localhost test]</span># <span class="selector-tag">du</span> <span class="selector-tag">log30</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span> <span class="selector-tag">log31</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span> </span><br><span class="line"></span><br><span class="line">4       <span class="selector-tag">log30</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line"></span><br><span class="line">4       <span class="selector-tag">log31</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[root@localhost test]</span>#</span><br></pre></td></tr></table></figure><p>说明：</p><p>实例5：只显示总和的大小</p><p>命令：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">du -s</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> test]<span class="meta"># du -s</span></span><br><span class="line"></span><br><span class="line"><span class="number">1288</span>    .</span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@localhost</span> test]<span class="meta"># du -s scf</span></span><br><span class="line"></span><br><span class="line"><span class="number">32</span>      scf</span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@localhost</span> test]<span class="meta"># cd ..</span></span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@localhost</span> soft]<span class="meta"># du -s test</span></span><br><span class="line"></span><br><span class="line"><span class="number">1288</span>    test</span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@localhost</span> soft]<span class="meta">#</span></span><br></pre></td></tr></table></figure><p>说明：</p><p>实例6：方便阅读的格式显示</p><p>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -h <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">root@</span>localhost soft]# du -h test</span><br><span class="line"></span><br><span class="line"><span class="number">608</span>K    test/test6</span><br><span class="line"></span><br><span class="line"><span class="number">308</span>K    test/test4</span><br><span class="line"></span><br><span class="line"><span class="number">4.0</span>K    test/scf/lib</span><br><span class="line"></span><br><span class="line"><span class="number">4.0</span>K    test/scf/service/deploy/product</span><br><span class="line"></span><br><span class="line"><span class="number">4.0</span>K    test/scf/service/deploy/info</span><br><span class="line"></span><br><span class="line"><span class="number">12</span>K     test/scf/service/deploy</span><br><span class="line"></span><br><span class="line"><span class="number">16</span>K     test/scf/service</span><br><span class="line"></span><br><span class="line"><span class="number">4.0</span>K    test/scf/doc</span><br><span class="line"></span><br><span class="line"><span class="number">4.0</span>K    test/scf/bin</span><br><span class="line"></span><br><span class="line"><span class="number">32</span>K     test/scf</span><br><span class="line"></span><br><span class="line"><span class="number">8.0</span>K    test/test3</span><br><span class="line"></span><br><span class="line"><span class="number">1.3</span>M    test</span><br><span class="line"></span><br><span class="line">[<span class="symbol">root@</span>localhost soft]#</span><br></pre></td></tr></table></figure><p>说明：</p><p>实例7：文件和目录都显示</p><p>命令：</p><p>输出：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost soft]# du -ah <span class="keyword">test</span></span><br><span class="line"></span><br><span class="line">4.0K    <span class="keyword">test</span>/log31.tar.gz</span><br><span class="line"></span><br><span class="line">4.0K    <span class="keyword">test</span>/test13.tar.gz</span><br><span class="line"></span><br><span class="line">0       <span class="keyword">test</span>/linklog.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">0       <span class="keyword">test</span>/test6/log2014.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">300K    <span class="keyword">test</span>/test6/linklog.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">0       <span class="keyword">test</span>/test6/log2015.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">4.0K    <span class="keyword">test</span>/test6/log2013.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">300K    <span class="keyword">test</span>/test6/log2012.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">0       <span class="keyword">test</span>/test6/log2017.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">0       <span class="keyword">test</span>/test6/log2016.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">608K    <span class="keyword">test</span>/test6</span><br><span class="line"></span><br><span class="line">0       <span class="keyword">test</span>/log2015.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">0       <span class="keyword">test</span>/test4/log2014.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">4.0K    <span class="keyword">test</span>/test4/log2013.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">300K    <span class="keyword">test</span>/test4/log2012.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">308K    <span class="keyword">test</span>/test4</span><br><span class="line"></span><br><span class="line">4.0K    <span class="keyword">test</span>/scf/lib</span><br><span class="line"></span><br><span class="line">4.0K    <span class="keyword">test</span>/scf/service/deploy/product</span><br><span class="line"></span><br><span class="line">4.0K    <span class="keyword">test</span>/scf/service/deploy/info</span><br><span class="line"></span><br><span class="line">12K     <span class="keyword">test</span>/scf/service/deploy</span><br><span class="line"></span><br><span class="line">16K     <span class="keyword">test</span>/scf/service</span><br><span class="line"></span><br><span class="line">4.0K    <span class="keyword">test</span>/scf/doc</span><br><span class="line"></span><br><span class="line">4.0K    <span class="keyword">test</span>/scf/bin</span><br><span class="line"></span><br><span class="line">32K     <span class="keyword">test</span>/scf</span><br><span class="line"></span><br><span class="line">4.0K    <span class="keyword">test</span>/log2013.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">300K    <span class="keyword">test</span>/log2012.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">0       <span class="keyword">test</span>/log2017.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">0       <span class="keyword">test</span>/log2016.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">4.0K    <span class="keyword">test</span>/log30.tar.gz</span><br><span class="line"></span><br><span class="line">4.0K    <span class="keyword">test</span>/<span class="keyword">log</span>.tar.bz2</span><br><span class="line"></span><br><span class="line">4.0K    <span class="keyword">test</span>/<span class="keyword">log</span>.tar.gz</span><br><span class="line"></span><br><span class="line">0       <span class="keyword">test</span>/test3/log2014.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">4.0K    <span class="keyword">test</span>/test3/log2013.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">8.0K    <span class="keyword">test</span>/test3</span><br><span class="line"></span><br><span class="line">4.0K    <span class="keyword">test</span>/scf.tar.gz</span><br><span class="line"></span><br><span class="line">1.3M    <span class="keyword">test</span></span><br><span class="line"></span><br><span class="line">[root@localhost soft]#</span><br></pre></td></tr></table></figure><p>说明：</p><p>实例8：显示几个文件或目录各自占用磁盘空间的大小，还统计它们的总和</p><p>命令：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -c log30<span class="selector-class">.tar</span><span class="selector-class">.gz</span> log31<span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@localhost test]</span># <span class="selector-tag">du</span> <span class="selector-tag">-c</span> <span class="selector-tag">log30</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span> <span class="selector-tag">log31</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span> </span><br><span class="line"></span><br><span class="line">4       <span class="selector-tag">log30</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line"></span><br><span class="line">4       <span class="selector-tag">log31</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line"></span><br><span class="line">8       总计</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[root@localhost test]</span>#</span><br></pre></td></tr></table></figure><p>说明：</p><p>加上-c选项后，du不仅显示两个目录各自占用磁盘空间的大小，还在最后一行统计它们的总和。</p><p>实例9：按照空间大小排序</p><p>命令：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du|<span class="type">sort</span> -nr|<span class="type">more</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">root@</span>localhost test]# du|sort -nr|more</span><br><span class="line"></span><br><span class="line"><span class="number">1288</span>    .</span><br><span class="line"></span><br><span class="line"><span class="number">608</span>     ./test6</span><br><span class="line"></span><br><span class="line"><span class="number">308</span>     ./test4</span><br><span class="line"></span><br><span class="line"><span class="number">32</span>      ./scf</span><br><span class="line"></span><br><span class="line"><span class="number">16</span>      ./scf/service</span><br><span class="line"></span><br><span class="line"><span class="number">12</span>      ./scf/service/deploy</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>       ./test3</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>       ./scf/service/deploy/product</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>       ./scf/service/deploy/info</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>       ./scf/lib</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>       ./scf/doc</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>       ./scf/bin</span><br><span class="line"></span><br><span class="line">[<span class="symbol">root@</span>localhost test]#</span><br></pre></td></tr></table></figure><p>说明：</p><p>实例10：输出当前目录下各个子目录所使用的空间</p><p>命令：</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -h  --<span class="built_in">max</span>-<span class="symbol">depth</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">root@</span>localhost test]# du -h  --max-depth=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">608</span>K    ./test6</span><br><span class="line"></span><br><span class="line"><span class="number">308</span>K    ./test4</span><br><span class="line"></span><br><span class="line"><span class="number">32</span>K     ./scf</span><br><span class="line"></span><br><span class="line"><span class="number">8.0</span>K    ./test3</span><br><span class="line"></span><br><span class="line"><span class="number">1.3</span>M    .</span><br><span class="line"></span><br><span class="line">[<span class="symbol">root@</span>localhost test]#</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的.&lt;br&gt;查看磁盘空间： df -h &lt;/p&gt;
&lt;p&gt;1．命令格式：&lt;/p&gt;
&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;du [&lt;span class=&quot;string&quot;&gt;选项&lt;/span&gt;][&lt;span class=&quot;symbol&quot;&gt;文件&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;2．命令功能：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="du" scheme="http://www.jiayie.xyz/tags/du/"/>
    
  </entry>
  
  <entry>
    <title>详细SSR脚本教程，fq，免流</title>
    <link href="http://www.jiayie.xyz/2019/06/13/%E8%AF%A6%E7%BB%86SSR%E8%84%9A%E6%9C%AC%E6%95%99%E7%A8%8B%EF%BC%8Cfq%EF%BC%8C%E5%85%8D%E6%B5%81/"/>
    <id>http://www.jiayie.xyz/2019/06/13/%E8%AF%A6%E7%BB%86SSR%E8%84%9A%E6%9C%AC%E6%95%99%E7%A8%8B%EF%BC%8Cfq%EF%BC%8C%E5%85%8D%E6%B5%81/</id>
    <published>2019-06-13T05:18:42.000Z</published>
    <updated>2019-06-13T06:02:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>介绍：可以看做SSR脚本版 可免流 可fq 省电 自启准备：</p><ol><li>手机root</li><li>机场（s sr订阅）</li><li>magisk</li><li>mt文件管理器<a id="more"></a>magisk模块链接:<a href="https://www.lanzous.com/i4jvc2d" target="_blank" rel="noopener">https://www.lanzous.com/i4jvc2d</a><br>.magisk刷入免流模块，sussr5.7:<a href="https://www.lanzous.com/i4jwhtg" target="_blank" rel="noopener">https://www.lanzous.com/i4jwhtg</a></li><li>刷入完成后，重启手机，打开mt文件管理器，进入/system/xbin/sussr文件夹下<img src="/2019/06/13/详细SSR脚本教程，fq，免流/1.jpg"></li><li>进入/bl文件夹找到dy（即订阅）文件</li></ol><p>打开填入你的节点订阅</p><img src="/2019/06/13/详细SSR脚本教程，fq，免流/2.jpg"><ol start="4"><li>将订阅填入dy文件后退出保存（删除dy.bak,如果有）完事后，进入/sussr/gn/文件夹下，如下图<img src="/2019/06/13/详细SSR脚本教程，fq，免流/3.jpg"></li><li>先点击更新节点.sh 执行 完成后再点击一键导入配置.sh 执行完成后进入/sussr/VPS文件夹 我们可以看见多了很多模式<img src="/2019/06/13/详细SSR脚本教程，fq，免流/4.jpg"></li><li>我们选择一个我们想用的模式把名字复制好<img src="/2019/06/13/详细SSR脚本教程，fq，免流/5.jpg"></li><li>复制了名字我们进入/sussr文件夹打开setting.ini文件修改vpsconf引号内为我们复制的模式名词，注意下面的host，那是混淆，一会来改。（混淆：找到合适的混淆，便可以向运营商伪装我们使用的是免费的流量，也就是免流，没有混淆，没加混淆即正常代理，走正常流量）<img src="/2019/06/13/详细SSR脚本教程，fq，免流/6.jpg"></li><li>回到/sussr文件夹下，找到混淆.txt，打开复制选择合适的混淆，我是联通，我选了个通用的高级沃商店伪装<img src="/2019/06/13/详细SSR脚本教程，fq，免流/7.jpg"></li><li>选择好伪装后，退出进入setting.ini文件</li></ol><p>找到host 粘贴混淆</p><img src="/2019/06/13/详细SSR脚本教程，fq，免流/8.jpg"><p>（免流的配置主要在setting.ini里，一个是填写模式，模式存储在/VPS文件夹下，一个是填写混淆）11.填写完毕后，退出保存，这个时候一切准备工作都完成了，有了模式，配置了模式，配置了混淆，我们选择 start.sh 执行stop.sh（这是关闭）check.sh（检测状态）</p><img src="/2019/06/13/详细SSR脚本教程，fq，免流/9.jpg"><p>12.执行完成就启动了ssr，我们可以到/gn，点击 查询ip归属地.sh 执行，如果ip和节点ip（可以打开使用的模式.txt里面看见）一致，即代理成功，一般来说地址和所在地相差甚远即ip不同，代理成功</p><img src="/2019/06/13/详细SSR脚本教程，fq，免流/10.jpg"><p>13.如果你只有ssr，没有订阅，看这里，在/VPS文件夹下新建一个文件，填入你的ssr（一次一个），退出保存，点击同文件夹下的  SSR链接转换.sh 完成后，你的模式就生成完毕了教程到此结束，下面是拓展建议：<br>14.如果你有个不稳定的服务器，也就是你的模式没网了，点击 stop.sh 即可关闭还有一点（setting.ini有个tcp放行应用）这里可以填入应用包名，即不代理的应用，比如这里填入 com.tencent.mm 这是微信的包名，那么当模式挂掉了的话，微信依然有网，依然可以付款（不至于尴尬）当然放行的应用都不免流</p><img src="/2019/06/13/详细SSR脚本教程，fq，免流/11.jpg"><p>15.查看包名，简单的就是进入/data/data/  文件名即应用的包名</p><img src="/2019/06/13/详细SSR脚本教程，fq，免流/12.jpg"><p>16.setting.ini里面有很多配置，想多懂点的可以看看/sussr文件夹下的说明教程17.模式开启后，无网（1.模式的原因 （测试方法：不填混淆开启模式，再开关飞行模式，检测网络，查看ip）2.混淆的原因 （测试方法：更换混淆开启模式，再开关飞行模式，检测网络，查看ip）），流量免不免查流量免流不是全免，有时候使用了几个g的流量会扣几兆甚至几十兆，这就是俗称的跳点18.本教程不同于tiny，是SSR免流，大神就别来了，给小白使用看的细magisk免流开机自启教程</p><p>作者：某安男神<br>链接：<a href="https://www.jianshu.com/p/b7c7cf0cca29" target="_blank" rel="noopener">https://www.jianshu.com/p/b7c7cf0cca29</a><br>来源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍：可以看做SSR脚本版 可免流 可fq 省电 自启准备：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;手机root&lt;/li&gt;
&lt;li&gt;机场（s sr订阅）&lt;/li&gt;
&lt;li&gt;magisk&lt;/li&gt;
&lt;li&gt;mt文件管理器&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="脚本 免流" scheme="http://www.jiayie.xyz/tags/%E8%84%9A%E6%9C%AC-%E5%85%8D%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>docker删除所有退出的容器</title>
    <link href="http://www.jiayie.xyz/2019/06/06/docker%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E9%80%80%E5%87%BA%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
    <id>http://www.jiayie.xyz/2019/06/06/docker%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E9%80%80%E5%87%BA%E7%9A%84%E5%AE%B9%E5%99%A8/</id>
    <published>2019-06-06T07:47:06.000Z</published>
    <updated>2019-06-06T07:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>方法一：</p><ol><li><p>显示所有的容器，过滤出Exited状态的容器，取出这些容器的ID，</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo</span> docker ps -a|grep Exited|awk <span class="string">'&#123;print <span class="variable">$1</span>&#125;'</span></span><br></pre></td></tr></table></figure></li><li><p>查询所有的容器，过滤出Exited状态的容器，列出容器ID，删除这些容器</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo</span> docker rm `docker ps -a|grep Exited|awk <span class="string">'&#123;print <span class="variable">$1</span>&#125;'</span>`</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><p>方法二： </p><ol start="3"><li>删除所有未运行的容器（已经运行的删除不了，未运行的就一起被删除了）<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker rm <span class="constructor">$(<span class="params">sudo</span> <span class="params">docker</span> <span class="params">ps</span> -<span class="params">a</span> -<span class="params">q</span>)</span></span><br></pre></td></tr></table></figure></li></ol><p>方法三：</p><ol start="4"><li>根据容器的状态，删除Exited状态的容器<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker rm <span class="constructor">$(<span class="params">sudo</span> <span class="params">docker</span> <span class="params">ps</span> -<span class="params">qf</span> <span class="params">status</span>=<span class="params">exited</span>)</span></span><br></pre></td></tr></table></figure></li></ol><p>方法四：</p><ol start="5"><li>Docker 1.13版本以后，可以使用 docker containers prune 命令，删除孤立的容器。<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker <span class="keyword">container</span> prune</span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li>删除所有镜像<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker rmi <span class="constructor">$(<span class="params">docker</span> <span class="params">images</span> -<span class="params">q</span>)</span></span><br></pre></td></tr></table></figure></li></ol><ol start="7"><li>1.13版本以后，开始支持prune命令，快速删除已退出的容器</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;方法一：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;显示所有的容器，过滤出Exited状态的容器，取出这些容器的ID，&lt;/p&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;sudo&lt;/span&gt; docker ps -a|grep Exited|awk &lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;print &lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;&amp;#125;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查询所有的容器，过滤出Exited状态的容器，列出容器ID，删除这些容器&lt;/p&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;sudo&lt;/span&gt; docker rm `docker ps -a|grep Exited|awk &lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;print &lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;&amp;#125;&#39;&lt;/span&gt;`&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="docker" scheme="http://www.jiayie.xyz/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>简单修改打造自己的Armbian-IMG底包</title>
    <link href="http://www.jiayie.xyz/2019/06/04/%E7%AE%80%E5%8D%95%E4%BF%AE%E6%94%B9%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84Armbian-IMG%E5%BA%95%E5%8C%85/"/>
    <id>http://www.jiayie.xyz/2019/06/04/%E7%AE%80%E5%8D%95%E4%BF%AE%E6%94%B9%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84Armbian-IMG%E5%BA%95%E5%8C%85/</id>
    <published>2019-06-04T01:45:14.000Z</published>
    <updated>2019-06-04T03:22:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文转自恩山，不为别的只是怕什么时候再被河蟹了感谢<a href="https://www.right.com.cn/forum/thread-680508-1-1.html" target="_blank" rel="noopener">小狮子原文地址</a></p><ol><li><h4 id="下载Armbian的官方底包IMG-，比如你可以下载了Ubuntu-5-77-401的底包"><a href="#下载Armbian的官方底包IMG-，比如你可以下载了Ubuntu-5-77-401的底包" class="headerlink" title="下载Armbian的官方底包IMG ，比如你可以下载了Ubuntu 5.77 401的底包"></a>下载Armbian的官方底包IMG ，比如你可以下载了Ubuntu 5.77 401的底包</h4>（个人推荐用这个修改的底包）Armbian_5.77_Aml-s905_Ubuntu_bionic_default_5.0.2_20190401.img<a id="more"></a>本帖隐藏的内容</li><li><h4 id="在虚拟机的Ubuntu系统下，输入命令"><a href="#在虚拟机的Ubuntu系统下，输入命令" class="headerlink" title="在虚拟机的Ubuntu系统下，输入命令"></a>在虚拟机的Ubuntu系统下，输入命令</h4></li></ol><p>fdisk -l Armbian_5.77_Aml-s905_Ubuntu_bionic_default_5.0.2_20190401.img</p><p>会出现如下信息</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root@</span>ubuntu:/mnt# fdisk -l Armbian_5<span class="number">.77</span>_Aml-s905_Ubuntu_bionic_default_5<span class="number">.0</span><span class="number">.2</span>_20190401.img</span><br><span class="line"></span><br><span class="line">Disk Armbian_5<span class="number">.77</span>_Aml-s905_Ubuntu_bionic_default_5<span class="number">.0</span><span class="number">.2</span>_20190401.img: <span class="number">1853</span> MB, <span class="number">1853882368</span> bytes</span><br><span class="line"><span class="number">4</span> heads, <span class="number">32</span> sectors/track, <span class="number">28288</span> cylinders, total <span class="number">3620864</span> sectors</span><br><span class="line">Units = sectors of <span class="number">1</span> * <span class="number">512</span> = <span class="number">512</span> bytes</span><br><span class="line">Sector size (logical/physical): <span class="number">512</span> bytes / <span class="number">512</span> bytes</span><br><span class="line">I/O size (minimum/optimal): <span class="number">512</span> bytes / <span class="number">512</span> bytes</span><br><span class="line">Disk identifier: <span class="number">0xcb9b2129</span></span><br><span class="line"></span><br><span class="line">                                                         Device Boot                                       Start         End      Blocks   Id  System</span><br><span class="line">Armbian_5<span class="number">.77</span>_Aml-s905_Ubuntu_bionic_default_5<span class="number">.0</span><span class="number">.2</span>_20190401.img1            <span class="number">8192</span>      <span class="number">270335</span>      <span class="number">131072</span>    e  W95 FAT16 (LBA)</span><br><span class="line">Armbian_5<span class="number">.77</span>_Aml-s905_Ubuntu_bionic_default_5<span class="number">.0</span><span class="number">.2</span>_20190401.img2          <span class="number">270336</span>     <span class="number">3620863</span>     <span class="number">1675264</span>   <span class="number">83</span>  Linux</span><br></pre></td></tr></table></figure><ol start="3"><li><h4 id="我们要关注的是最后两句。img1是我们的boot区，-img2是文件区，比如我们要把去高负载的-dtb文件加入到boot区"><a href="#我们要关注的是最后两句。img1是我们的boot区，-img2是文件区，比如我们要把去高负载的-dtb文件加入到boot区" class="headerlink" title="我们要关注的是最后两句。img1是我们的boot区，.img2是文件区，比如我们要把去高负载的.dtb文件加入到boot区"></a>我们要关注的是最后两句。img1是我们的boot区，.img2是文件区，比如我们要把去高负载的.dtb文件加入到boot区</h4>那么首先就要加载boot区，然后把文件拷贝进去，再做修改。<br>那么怎么加载boot区呢，执行如下命令<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -o loop,offset=<span class="number">4194304</span> Armbian_5<span class="number">.77</span>_Aml-s905_Ubuntu_bionic_default_5<span class="number">.0</span><span class="number">.2</span>_20190401.img /media</span><br></pre></td></tr></table></figure></li></ol><p>上面的4194304怎么得来的，是8192*512，.img1的offset的Start从8192开始，这条语句就是把boot区的内容加载到/media里<br>然后在/media里就可以看到boot的内容，比如dtb文件夹，uEnv.ini文件，</p><p>把xiangsm大神在帖子里分享的5.77的dtb文件弄进去，就可以去高负载<br>下载地址<br>链接: <a href="https://pan.baidu.com/s/1UL1VQ5tfuKmBBS-PM-Mwhg" target="_blank" rel="noopener">https://pan.baidu.com/s/1UL1VQ5tfuKmBBS-PM-Mwhg</a> 提取码: m68p<br>下载附件 –&gt; 解开dtb文件 –&gt; 复制到armbian的/boot/dtb/ 目录 –&gt; 相应修改/boot/uEnv.ini中的dtb文件路径设置。</p><p>同理，我们可以加载.img2的文件分区，在里面修改sysctl.conf实现bbr的默认开启，<br>在/etc/sysctl.conf末尾添加下面两行:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">net<span class="selector-class">.core</span><span class="selector-class">.default_qdisc</span>=fq</span><br><span class="line">net<span class="selector-class">.ipv4</span><span class="selector-class">.tcp_congestion_control</span>=bbr</span><br><span class="line">然后执行：</span><br><span class="line">$ sudo sysctl -p</span><br></pre></td></tr></table></figure><p>在rc.local里添加modprobe pppoe实现pppoe的开机加载。</p><ol start="4"><li><h4 id="修改完毕后-，用umount-media-退出，然后原开始你加载的IMG其实已经是你已经修改好的IMG了，此后可以自己刷入U盘试试了！"><a href="#修改完毕后-，用umount-media-退出，然后原开始你加载的IMG其实已经是你已经修改好的IMG了，此后可以自己刷入U盘试试了！" class="headerlink" title="修改完毕后 ，用umount /media 退出，然后原开始你加载的IMG其实已经是你已经修改好的IMG了，此后可以自己刷入U盘试试了！"></a>修改完毕后 ，用umount /media 退出，然后原开始你加载的IMG其实已经是你已经修改好的IMG了，此后可以自己刷入U盘试试了！</h4></li><li><h4 id="dtb文件修改方法"><a href="#dtb文件修改方法" class="headerlink" title="dtb文件修改方法"></a>dtb文件修改方法</h4><p>从<a href="https://yadi.sk/d/srrtn6kpnsKz2/Linux/ARMBIAN/5.77/S905下载由@150balbes编译好的镜像，我选的是debian/desktop版，您请随意。" target="_blank" rel="noopener">https://yadi.sk/d/srrtn6kpnsKz2/Linux/ARMBIAN/5.77/S905下载由@150balbes编译好的镜像，我选的是debian/desktop版，您请随意。</a></p><p>解压镜像并写入U盘，以linux系统为例：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xzcat --keep Armbian_5<span class="number">.77</span>_Aml-s905_Debian_stretch_default_5<span class="number">.0</span><span class="number">.2</span>_desktop_20190318.img.xz | sudo dd of=/dev/sdX bs=<span class="number">1</span>M &amp;&amp; sync</span><br></pre></td></tr></table></figure><p>将写好armbian的U盘插入关机状态的n1，通电启动，armbian就运行起来了。初次运行时会提示修改root密码和创建一个常规用户。</p><p>此时，armbian用的是kdahas-vim开发板的dtb，所以不完全适配n1，一些设备不工作，这是正常的，我们只需修改/boot/uEnv.ini指向n1的dtb即可。</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> 修改前的uEnv.ini：      dtb_name=<span class="regexp">/dtb/meson</span>-gxl-s905x-khadas-vim.dtb</span></span><br><span class="line"><span class="ruby">- 修改后的uEnv.ini：      dtb_name=<span class="regexp">/dtb/meson</span>-gxl-s905d-phicomm-n1.dtb</span></span><br></pre></td></tr></table></figure><p>修改完成后重启系统，重启后所有设备(lan/wifi/bluetooth/etc.)全部能工作！除了系统负载有点高。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo reboot</span><br></pre></td></tr></table></figure><p>下面解决系统负载问题，关键：修改随镜像文件自带的dtb文件中的一项与中断处理有关的设置： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 反编译原始n1 dtb文件为n1.dts</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> dtc -I dtb -O dts -o n1.dts /boot/meson-gxl-s905d-phicomm-n1.dtb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 用vi 或 nano打开n1.dts，将第183行注释掉。修改前：phandle = &lt;0x1e&gt;;  修改后： <span class="comment">#phandle = &lt;0x1e&gt;;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi n1.dts</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译新的n1.dtb</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> dtc -I dts -O dtb -o n1.dtb n1.dts</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制n1.dtb到/boot/dtb中并修改相应uEnv.ini文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo cp -av n1.dtb /boot/dtb/meson-gxl-s905d-phicomm-n1-xiangsm.dtb</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo sed -i -e <span class="string">'s/-n1/-n1-xiangsm/'</span> /boot/uEnv.ini   <span class="comment"># 或用vi/nano可视化编辑</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 好了，可以重启系统了，重启后，系统负载终于正常，并且各项硬件应该依然都能正常工作。</span></span><br><span class="line"><span class="meta">$</span><span class="bash">  sudo reboot</span></span><br></pre></td></tr></table></figure></li></ol><p>==========================================================<br>[注1] 在n1运行android时，务！必！不！要！将armbian u盘插入n1，否则armbian u盘的ext4分区内的文件权限和所有者会被android系统篡改，引起各种异常。<br>[注2] 开始用CZ600 u盘，可能是速度太慢，导致bootloader超时，fallback到emmc启动了，然后就要从头来过，因为U盘里的文件系统已经被污染。后用cz43，正常。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文转自恩山，不为别的只是怕什么时候再被河蟹了感谢&lt;a href=&quot;https://www.right.com.cn/forum/thread-680508-1-1.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;小狮子原文地址&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;h4 id=&quot;下载Armbian的官方底包IMG-，比如你可以下载了Ubuntu-5-77-401的底包&quot;&gt;&lt;a href=&quot;#下载Armbian的官方底包IMG-，比如你可以下载了Ubuntu-5-77-401的底包&quot; class=&quot;headerlink&quot; title=&quot;下载Armbian的官方底包IMG ，比如你可以下载了Ubuntu 5.77 401的底包&quot;&gt;&lt;/a&gt;下载Armbian的官方底包IMG ，比如你可以下载了Ubuntu 5.77 401的底包&lt;/h4&gt;（个人推荐用这个修改的底包）Armbian_5.77_Aml-s905_Ubuntu_bionic_default_5.0.2_20190401.img&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
    
      <category term="Armbian-IMG" scheme="http://www.jiayie.xyz/tags/Armbian-IMG/"/>
    
  </entry>
  
</feed>
